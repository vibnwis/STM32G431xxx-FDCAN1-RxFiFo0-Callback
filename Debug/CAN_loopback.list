
CAN_loopback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000394c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08003b2c  08003b2c  00013b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f74  08003f74  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003f74  08003f74  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f74  08003f74  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f74  08003f74  00013f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f78  08003f78  00013f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000074  08003ff0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08003ff0  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce3e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d62  00000000  00000000  0002cee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000998  00000000  00000000  0002ec48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b0  00000000  00000000  0002f5e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e65d  00000000  00000000  0002fe90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000081bd  00000000  00000000  0004e4ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b6a21  00000000  00000000  000566aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010d0cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ccc  00000000  00000000  0010d148  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003b14 	.word	0x08003b14

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08003b14 	.word	0x08003b14

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c4:	f000 fc09 	bl	8000ada <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c8:	f000 f850 	bl	800036c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002cc:	f000 f91a 	bl	8000504 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80002d0:	f000 f8b4 	bl	800043c <MX_FDCAN1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_LED_GPIO_Port, LD2_LED_Pin);
 80002d4:	2120      	movs	r1, #32
 80002d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002da:	f001 fce7 	bl	8001cac <HAL_GPIO_TogglePin>
	  isLedOn = !isLedOn;
 80002de:	4b1c      	ldr	r3, [pc, #112]	; (8000350 <main+0x90>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	bf14      	ite	ne
 80002e6:	2301      	movne	r3, #1
 80002e8:	2300      	moveq	r3, #0
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	f083 0301 	eor.w	r3, r3, #1
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	f003 0301 	and.w	r3, r3, #1
 80002f6:	b2da      	uxtb	r2, r3
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <main+0x90>)
 80002fa:	701a      	strb	r2, [r3, #0]
	  count++;
 80002fc:	4b15      	ldr	r3, [pc, #84]	; (8000354 <main+0x94>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	3301      	adds	r3, #1
 8000302:	b2da      	uxtb	r2, r3
 8000304:	4b13      	ldr	r3, [pc, #76]	; (8000354 <main+0x94>)
 8000306:	701a      	strb	r2, [r3, #0]
	  if (count > 255)
		  count = 0;
	  printf("Hello world count = %d\n", (int)count);
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <main+0x94>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	4619      	mov	r1, r3
 800030e:	4812      	ldr	r0, [pc, #72]	; (8000358 <main+0x98>)
 8000310:	f002 fcb8 	bl	8002c84 <iprintf>
	  HAL_Delay(1000);
 8000314:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000318:	f000 fc50 	bl	8000bbc <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  state=HAL_GPIO_ReadPin(BLUE_SW_GPIO_Port, BLUE_SW_Pin); //GPIO_PIN_SET
 800031c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000320:	480e      	ldr	r0, [pc, #56]	; (800035c <main+0x9c>)
 8000322:	f001 fc93 	bl	8001c4c <HAL_GPIO_ReadPin>
 8000326:	4603      	mov	r3, r0
 8000328:	461a      	mov	r2, r3
 800032a:	4b0d      	ldr	r3, [pc, #52]	; (8000360 <main+0xa0>)
 800032c:	701a      	strb	r2, [r3, #0]
	  if ( prev_state ==GPIO_PIN_RESET && state == GPIO_PIN_SET)
 800032e:	4b0d      	ldr	r3, [pc, #52]	; (8000364 <main+0xa4>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d106      	bne.n	8000344 <main+0x84>
 8000336:	4b0a      	ldr	r3, [pc, #40]	; (8000360 <main+0xa0>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d102      	bne.n	8000344 <main+0x84>
	  {
	  	printf("Blue SW ON - Activate transmission through FDCAN\n");
 800033e:	480a      	ldr	r0, [pc, #40]	; (8000368 <main+0xa8>)
 8000340:	f002 fd14 	bl	8002d6c <puts>

	  }
	  prev_state=state;
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <main+0xa0>)
 8000346:	781a      	ldrb	r2, [r3, #0]
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <main+0xa4>)
 800034a:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LD2_LED_GPIO_Port, LD2_LED_Pin);
 800034c:	e7c2      	b.n	80002d4 <main+0x14>
 800034e:	bf00      	nop
 8000350:	20000000 	.word	0x20000000
 8000354:	20000090 	.word	0x20000090
 8000358:	08003b2c 	.word	0x08003b2c
 800035c:	48000800 	.word	0x48000800
 8000360:	200000b3 	.word	0x200000b3
 8000364:	200000a1 	.word	0x200000a1
 8000368:	08003b44 	.word	0x08003b44

0800036c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b0a4      	sub	sp, #144	; 0x90
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000376:	2238      	movs	r2, #56	; 0x38
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f002 fc7a 	bl	8002c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000380:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	605a      	str	r2, [r3, #4]
 800038a:	609a      	str	r2, [r3, #8]
 800038c:	60da      	str	r2, [r3, #12]
 800038e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000390:	463b      	mov	r3, r7
 8000392:	2244      	movs	r2, #68	; 0x44
 8000394:	2100      	movs	r1, #0
 8000396:	4618      	mov	r0, r3
 8000398:	f002 fc6c 	bl	8002c74 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800039c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003a0:	f001 fc9e 	bl	8001ce0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a4:	2302      	movs	r3, #2
 80003a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003ac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ae:	2340      	movs	r3, #64	; 0x40
 80003b0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b2:	2302      	movs	r3, #2
 80003b4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003b6:	2302      	movs	r3, #2
 80003b8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80003ba:	2301      	movs	r3, #1
 80003bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 10;
 80003be:	230a      	movs	r3, #10
 80003c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003c4:	2302      	movs	r3, #2
 80003c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003ca:	2302      	movs	r3, #2
 80003cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003d0:	2302      	movs	r3, #2
 80003d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 fd34 	bl	8001e48 <HAL_RCC_OscConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80003e6:	f000 f9bb 	bl	8000760 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ea:	230f      	movs	r3, #15
 80003ec:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ee:	2303      	movs	r3, #3
 80003f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000402:	2102      	movs	r1, #2
 8000404:	4618      	mov	r0, r3
 8000406:	f002 f837 	bl	8002478 <HAL_RCC_ClockConfig>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000410:	f000 f9a6 	bl	8000760 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000418:	603b      	str	r3, [r7, #0]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800041a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800041e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000420:	463b      	mov	r3, r7
 8000422:	4618      	mov	r0, r3
 8000424:	f002 fa0c 	bl	8002840 <HAL_RCCEx_PeriphCLKConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800042e:	f000 f997 	bl	8000760 <Error_Handler>
  }
}
 8000432:	bf00      	nop
 8000434:	3790      	adds	r7, #144	; 0x90
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
	...

0800043c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000440:	4b2b      	ldr	r3, [pc, #172]	; (80004f0 <MX_FDCAN1_Init+0xb4>)
 8000442:	4a2c      	ldr	r2, [pc, #176]	; (80004f4 <MX_FDCAN1_Init+0xb8>)
 8000444:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000446:	4b2a      	ldr	r3, [pc, #168]	; (80004f0 <MX_FDCAN1_Init+0xb4>)
 8000448:	2200      	movs	r2, #0
 800044a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800044c:	4b28      	ldr	r3, [pc, #160]	; (80004f0 <MX_FDCAN1_Init+0xb4>)
 800044e:	2200      	movs	r2, #0
 8000450:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000452:	4b27      	ldr	r3, [pc, #156]	; (80004f0 <MX_FDCAN1_Init+0xb4>)
 8000454:	2200      	movs	r2, #0
 8000456:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000458:	4b25      	ldr	r3, [pc, #148]	; (80004f0 <MX_FDCAN1_Init+0xb4>)
 800045a:	2201      	movs	r2, #1
 800045c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800045e:	4b24      	ldr	r3, [pc, #144]	; (80004f0 <MX_FDCAN1_Init+0xb4>)
 8000460:	2200      	movs	r2, #0
 8000462:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000464:	4b22      	ldr	r3, [pc, #136]	; (80004f0 <MX_FDCAN1_Init+0xb4>)
 8000466:	2200      	movs	r2, #0
 8000468:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 800046a:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <MX_FDCAN1_Init+0xb4>)
 800046c:	220a      	movs	r2, #10
 800046e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000470:	4b1f      	ldr	r3, [pc, #124]	; (80004f0 <MX_FDCAN1_Init+0xb4>)
 8000472:	2201      	movs	r2, #1
 8000474:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000476:	4b1e      	ldr	r3, [pc, #120]	; (80004f0 <MX_FDCAN1_Init+0xb4>)
 8000478:	220d      	movs	r2, #13
 800047a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800047c:	4b1c      	ldr	r3, [pc, #112]	; (80004f0 <MX_FDCAN1_Init+0xb4>)
 800047e:	2202      	movs	r2, #2
 8000480:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000482:	4b1b      	ldr	r3, [pc, #108]	; (80004f0 <MX_FDCAN1_Init+0xb4>)
 8000484:	2201      	movs	r2, #1
 8000486:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000488:	4b19      	ldr	r3, [pc, #100]	; (80004f0 <MX_FDCAN1_Init+0xb4>)
 800048a:	2201      	movs	r2, #1
 800048c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 800048e:	4b18      	ldr	r3, [pc, #96]	; (80004f0 <MX_FDCAN1_Init+0xb4>)
 8000490:	220d      	movs	r2, #13
 8000492:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000494:	4b16      	ldr	r3, [pc, #88]	; (80004f0 <MX_FDCAN1_Init+0xb4>)
 8000496:	2202      	movs	r2, #2
 8000498:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800049a:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <MX_FDCAN1_Init+0xb4>)
 800049c:	2200      	movs	r2, #0
 800049e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80004a0:	4b13      	ldr	r3, [pc, #76]	; (80004f0 <MX_FDCAN1_Init+0xb4>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80004a6:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <MX_FDCAN1_Init+0xb4>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80004ac:	4810      	ldr	r0, [pc, #64]	; (80004f0 <MX_FDCAN1_Init+0xb4>)
 80004ae:	f000 fcb7 	bl	8000e20 <HAL_FDCAN_Init>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80004b8:	f000 f952 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  Hal_Error_Code = HAL_FDCAN_Init(&hfdcan1);
 80004bc:	480c      	ldr	r0, [pc, #48]	; (80004f0 <MX_FDCAN1_Init+0xb4>)
 80004be:	f000 fcaf 	bl	8000e20 <HAL_FDCAN_Init>
 80004c2:	4603      	mov	r3, r0
 80004c4:	461a      	mov	r2, r3
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <MX_FDCAN1_Init+0xbc>)
 80004c8:	701a      	strb	r2, [r3, #0]
    if (Hal_Error_Code != HAL_OK)
 80004ca:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <MX_FDCAN1_Init+0xbc>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d007      	beq.n	80004e2 <MX_FDCAN1_Init+0xa6>
    {
    	printf("HAL_FDCAN_Init() %d\n", (int)Hal_Error_Code);
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <MX_FDCAN1_Init+0xbc>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	4619      	mov	r1, r3
 80004d8:	4808      	ldr	r0, [pc, #32]	; (80004fc <MX_FDCAN1_Init+0xc0>)
 80004da:	f002 fbd3 	bl	8002c84 <iprintf>
    	Error_Handler();
 80004de:	f000 f93f 	bl	8000760 <Error_Handler>
    }

    printf("HAL_FDCAN_Init() OK\n");
 80004e2:	4807      	ldr	r0, [pc, #28]	; (8000500 <MX_FDCAN1_Init+0xc4>)
 80004e4:	f002 fc42 	bl	8002d6c <puts>



    FDCAN_COMM_config_a();
 80004e8:	f000 f882 	bl	80005f0 <FDCAN_COMM_config_a>

  /* USER CODE END FDCAN1_Init 2 */

}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	200000b8 	.word	0x200000b8
 80004f4:	40006400 	.word	0x40006400
 80004f8:	200000b2 	.word	0x200000b2
 80004fc:	08003b78 	.word	0x08003b78
 8000500:	08003b90 	.word	0x08003b90

08000504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <MX_GPIO_Init+0x94>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051e:	4a1e      	ldr	r2, [pc, #120]	; (8000598 <MX_GPIO_Init+0x94>)
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000526:	4b1c      	ldr	r3, [pc, #112]	; (8000598 <MX_GPIO_Init+0x94>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b19      	ldr	r3, [pc, #100]	; (8000598 <MX_GPIO_Init+0x94>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	4a18      	ldr	r2, [pc, #96]	; (8000598 <MX_GPIO_Init+0x94>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053e:	4b16      	ldr	r3, [pc, #88]	; (8000598 <MX_GPIO_Init+0x94>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_LED_GPIO_Port, LD2_LED_Pin, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2120      	movs	r1, #32
 800054e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000552:	f001 fb93 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_SW_Pin */
  GPIO_InitStruct.Pin = BLUE_SW_Pin;
 8000556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800055a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800055c:	2300      	movs	r3, #0
 800055e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_SW_GPIO_Port, &GPIO_InitStruct);
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	4619      	mov	r1, r3
 800056a:	480c      	ldr	r0, [pc, #48]	; (800059c <MX_GPIO_Init+0x98>)
 800056c:	f001 f9ec 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_LED_Pin */
  GPIO_InitStruct.Pin = LD2_LED_Pin;
 8000570:	2320      	movs	r3, #32
 8000572:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000574:	2301      	movs	r3, #1
 8000576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_LED_GPIO_Port, &GPIO_InitStruct);
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4619      	mov	r1, r3
 8000586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058a:	f001 f9dd 	bl	8001948 <HAL_GPIO_Init>

}
 800058e:	bf00      	nop
 8000590:	3720      	adds	r7, #32
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000
 800059c:	48000800 	.word	0x48000800

080005a0 <FDCAN_Enable_RX_InterrptL0>:


}

void FDCAN_Enable_RX_InterrptL0 (FDCAN_HandleTypeDef *hfdcan)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

	FDCANErrCode = HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE | FDCAN_IT_RX_FIFO0_FULL, FDCAN_RX_FIFO0 | FDCAN_RX_FIFO1 );
 80005a8:	2241      	movs	r2, #65	; 0x41
 80005aa:	2103      	movs	r1, #3
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f000 feed 	bl	800138c <HAL_FDCAN_ActivateNotification>
 80005b2:	4603      	mov	r3, r0
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <FDCAN_Enable_RX_InterrptL0+0x40>)
 80005b8:	701a      	strb	r2, [r3, #0]
	if(FDCANErrCode != HAL_OK)
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <FDCAN_Enable_RX_InterrptL0+0x40>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d007      	beq.n	80005d2 <FDCAN_Enable_RX_InterrptL0+0x32>
	{
		printf("HAL_FDCAN_ActivateNotification() %d\n", (int)Hal_Error_Code);
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <FDCAN_Enable_RX_InterrptL0+0x44>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	4619      	mov	r1, r3
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <FDCAN_Enable_RX_InterrptL0+0x48>)
 80005ca:	f002 fb5b 	bl	8002c84 <iprintf>
		Error_Handler();
 80005ce:	f000 f8c7 	bl	8000760 <Error_Handler>
	}

	printf("HAL_FDCAN_ActivateNotification() OK\n");
 80005d2:	4806      	ldr	r0, [pc, #24]	; (80005ec <FDCAN_Enable_RX_InterrptL0+0x4c>)
 80005d4:	f002 fbca 	bl	8002d6c <puts>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	200000a0 	.word	0x200000a0
 80005e4:	200000b2 	.word	0x200000b2
 80005e8:	08003bf0 	.word	0x08003bf0
 80005ec:	08003c18 	.word	0x08003c18

080005f0 <FDCAN_COMM_config_a>:

void FDCAN_COMM_config_a(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

	FDCAN_RX_Config_a();
 80005f4:	f000 f826 	bl	8000644 <FDCAN_RX_Config_a>

		printf("HAL_CAN_RegisterCallback() OK\n");

#endif
	// Activate the FDCAN peripheral
	FDCANErrCode = HAL_FDCAN_Start(&hfdcan1);
 80005f8:	480d      	ldr	r0, [pc, #52]	; (8000630 <FDCAN_COMM_config_a+0x40>)
 80005fa:	f000 fdc5 	bl	8001188 <HAL_FDCAN_Start>
 80005fe:	4603      	mov	r3, r0
 8000600:	461a      	mov	r2, r3
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <FDCAN_COMM_config_a+0x44>)
 8000604:	701a      	strb	r2, [r3, #0]
	if(FDCANErrCode != HAL_OK)
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <FDCAN_COMM_config_a+0x44>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d007      	beq.n	800061e <FDCAN_COMM_config_a+0x2e>
	{
		printf("HAL_FDCAN_Start() %d\n", (int)Hal_Error_Code);
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <FDCAN_COMM_config_a+0x48>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	4619      	mov	r1, r3
 8000614:	4809      	ldr	r0, [pc, #36]	; (800063c <FDCAN_COMM_config_a+0x4c>)
 8000616:	f002 fb35 	bl	8002c84 <iprintf>
		Error_Handler();
 800061a:	f000 f8a1 	bl	8000760 <Error_Handler>
	}

	printf("HAL_FDCAN_Start() OK\n");
 800061e:	4808      	ldr	r0, [pc, #32]	; (8000640 <FDCAN_COMM_config_a+0x50>)
 8000620:	f002 fba4 	bl	8002d6c <puts>

	FDCAN_Enable_RX_InterrptL0 (&hfdcan1);
 8000624:	4802      	ldr	r0, [pc, #8]	; (8000630 <FDCAN_COMM_config_a+0x40>)
 8000626:	f7ff ffbb 	bl	80005a0 <FDCAN_Enable_RX_InterrptL0>

}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	200000b8 	.word	0x200000b8
 8000634:	200000a0 	.word	0x200000a0
 8000638:	200000b2 	.word	0x200000b2
 800063c:	08003c3c 	.word	0x08003c3c
 8000640:	08003c54 	.word	0x08003c54

08000644 <FDCAN_RX_Config_a>:

void FDCAN_RX_Config_a()
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0


	FDCAN_FilterTypeDef sFilterConfig;

	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800064a:	2300      	movs	r3, #0
 800064c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000652:	2302      	movs	r3, #2
 8000654:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000656:	2301      	movs	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x321;   // Read back its own message
 800065a:	f240 3321 	movw	r3, #801	; 0x321
 800065e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;   // Mask off the entire MASK 11-bit registry
 8000660:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000664:	617b      	str	r3, [r7, #20]

	FDCANErrCode = HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 8000666:	463b      	mov	r3, r7
 8000668:	4619      	mov	r1, r3
 800066a:	480d      	ldr	r0, [pc, #52]	; (80006a0 <FDCAN_RX_Config_a+0x5c>)
 800066c:	f000 fd32 	bl	80010d4 <HAL_FDCAN_ConfigFilter>
 8000670:	4603      	mov	r3, r0
 8000672:	461a      	mov	r2, r3
 8000674:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <FDCAN_RX_Config_a+0x60>)
 8000676:	701a      	strb	r2, [r3, #0]
	if(FDCANErrCode != HAL_OK)
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <FDCAN_RX_Config_a+0x60>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d007      	beq.n	8000690 <FDCAN_RX_Config_a+0x4c>
	{
		printf("HAL_FDCAN_ConfigFilter() %d\n", (int)FDCANErrCode);
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <FDCAN_RX_Config_a+0x60>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4619      	mov	r1, r3
 8000686:	4808      	ldr	r0, [pc, #32]	; (80006a8 <FDCAN_RX_Config_a+0x64>)
 8000688:	f002 fafc 	bl	8002c84 <iprintf>
		Error_Handler();
 800068c:	f000 f868 	bl	8000760 <Error_Handler>
	}

	printf("HAL_FDCAN_ConfigFilter() OK\n");
 8000690:	4806      	ldr	r0, [pc, #24]	; (80006ac <FDCAN_RX_Config_a+0x68>)
 8000692:	f002 fb6b 	bl	8002d6c <puts>
	}
	printf("HAL_FDCAN_ConfigGlobalFilter() OK\n");
#endif
	// Proceed to call FDCAN_config_a()

}
 8000696:	bf00      	nop
 8000698:	3718      	adds	r7, #24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200000b8 	.word	0x200000b8
 80006a4:	200000a0 	.word	0x200000a0
 80006a8:	08003c6c 	.word	0x08003c6c
 80006ac:	08003c8c 	.word	0x08003c8c

080006b0 <HAL_FDCAN_RxFifo0Callback>:
  * @retval None
  */


void  HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]


	 if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d03b      	beq.n	800073c <HAL_FDCAN_RxFifo0Callback+0x8c>
	  {
		  /* Retreive Rx messages from RX FIFO0 */
		  FDCANErrCode = HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData);
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <HAL_FDCAN_RxFifo0Callback+0x94>)
 80006c6:	4a20      	ldr	r2, [pc, #128]	; (8000748 <HAL_FDCAN_RxFifo0Callback+0x98>)
 80006c8:	2140      	movs	r1, #64	; 0x40
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f000 fd84 	bl	80011d8 <HAL_FDCAN_GetRxMessage>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <HAL_FDCAN_RxFifo0Callback+0x9c>)
 80006d6:	701a      	strb	r2, [r3, #0]
		  if (FDCANErrCode != HAL_OK)
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <HAL_FDCAN_RxFifo0Callback+0x9c>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d007      	beq.n	80006f0 <HAL_FDCAN_RxFifo0Callback+0x40>
		  {
			  /* Reception Error */
			  printf("HAL_FDCAN_GetRxMessage() error code = %d\n", FDCANErrCode);
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <HAL_FDCAN_RxFifo0Callback+0x9c>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	4619      	mov	r1, r3
 80006e6:	481a      	ldr	r0, [pc, #104]	; (8000750 <HAL_FDCAN_RxFifo0Callback+0xa0>)
 80006e8:	f002 facc 	bl	8002c84 <iprintf>

			  Error_Handler();
 80006ec:	f000 f838 	bl	8000760 <Error_Handler>

		  }
		  printf("HAL_FDCAN_GetRxMessage() -- meeee callback\n");
 80006f0:	4818      	ldr	r0, [pc, #96]	; (8000754 <HAL_FDCAN_RxFifo0Callback+0xa4>)
 80006f2:	f002 fb3b 	bl	8002d6c <puts>

		  printf("RxHeader.Identifier = 0x%x RxHeader.IdType = 0x%x RxHeader.DataLength = 0x%d\n", (unsigned int)RxHeader.Identifier, (unsigned int)RxHeader.IdType, (unsigned int)(RxHeader.DataLength >> 16));
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <HAL_FDCAN_RxFifo0Callback+0x98>)
 80006f8:	6819      	ldr	r1, [r3, #0]
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <HAL_FDCAN_RxFifo0Callback+0x98>)
 80006fc:	685a      	ldr	r2, [r3, #4]
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_FDCAN_RxFifo0Callback+0x98>)
 8000700:	68db      	ldr	r3, [r3, #12]
 8000702:	0c1b      	lsrs	r3, r3, #16
 8000704:	4814      	ldr	r0, [pc, #80]	; (8000758 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8000706:	f002 fabd 	bl	8002c84 <iprintf>
		  /* Display the messages */
		  if ((RxHeader.Identifier == 0x321) && (RxHeader.IdType == FDCAN_STANDARD_ID) && (RxHeader.DataLength == FDCAN_DLC_BYTES_1))
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <HAL_FDCAN_RxFifo0Callback+0x98>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f240 3221 	movw	r2, #801	; 0x321
 8000712:	4293      	cmp	r3, r2
 8000714:	d112      	bne.n	800073c <HAL_FDCAN_RxFifo0Callback+0x8c>
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <HAL_FDCAN_RxFifo0Callback+0x98>)
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d10e      	bne.n	800073c <HAL_FDCAN_RxFifo0Callback+0x8c>
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <HAL_FDCAN_RxFifo0Callback+0x98>)
 8000720:	68db      	ldr	r3, [r3, #12]
 8000722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000726:	d109      	bne.n	800073c <HAL_FDCAN_RxFifo0Callback+0x8c>
		  {
			  //State=RxData[0];
			  //printf("RxHd ID = 0x321 and Rxdata =  0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\n", RxData[0], RxData[1], RxData[2], RxData[3],RxData[4], RxData[5],RxData[6], RxData[7]);
			  printf("RdDataLength %d , RxData 0x%x\n", (int)(RxHeader.DataLength >> 16), (unsigned int)RxData[0]);
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <HAL_FDCAN_RxFifo0Callback+0x98>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	0c1b      	lsrs	r3, r3, #16
 800072e:	4619      	mov	r1, r3
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <HAL_FDCAN_RxFifo0Callback+0x94>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	4809      	ldr	r0, [pc, #36]	; (800075c <HAL_FDCAN_RxFifo0Callback+0xac>)
 8000738:	f002 faa4 	bl	8002c84 <iprintf>
		  }

		//  FDCAN_Enable_RX_InterrptL0 (hfdcan);

	  }
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000124 	.word	0x20000124
 8000748:	20000150 	.word	0x20000150
 800074c:	200000a0 	.word	0x200000a0
 8000750:	08003dc4 	.word	0x08003dc4
 8000754:	08003df0 	.word	0x08003df0
 8000758:	08003e1c 	.word	0x08003e1c
 800075c:	08003e6c 	.word	0x08003e6c

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    printf("Error Handle - endless loop. STOP DEBUG Mode\n");
 8000764:	4801      	ldr	r0, [pc, #4]	; (800076c <Error_Handler+0xc>)
 8000766:	f002 fb01 	bl	8002d6c <puts>
	while (1) {
 800076a:	e7fe      	b.n	800076a <Error_Handler+0xa>
 800076c:	08003e8c 	.word	0x08003e8c

08000770 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000778:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800077c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	2b00      	cmp	r3, #0
 8000786:	d013      	beq.n	80007b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000788:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800078c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000790:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000794:	2b00      	cmp	r3, #0
 8000796:	d00b      	beq.n	80007b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000798:	e000      	b.n	800079c <ITM_SendChar+0x2c>
    {
      __NOP();
 800079a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800079c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d0f9      	beq.n	800079a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80007a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	b2d2      	uxtb	r2, r2
 80007ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80007b0:	687b      	ldr	r3, [r7, #4]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <_write>:
 * 			ptr
 * 			len
 * @return	None
 ******************************************************************************/
uint32_t _write(uint32_t file, char *ptr, uint32_t len)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b086      	sub	sp, #24
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	60f8      	str	r0, [r7, #12]
 80007c6:	60b9      	str	r1, [r7, #8]
 80007c8:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
	for(i = 0; i < len; i++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	e009      	b.n	80007e8 <_write+0x2a>
	{
		ITM_SendChar((*ptr++));
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	1c5a      	adds	r2, r3, #1
 80007d8:	60ba      	str	r2, [r7, #8]
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ffc7 	bl	8000770 <ITM_SendChar>
	for(i = 0; i < len; i++)
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	3301      	adds	r3, #1
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	697a      	ldr	r2, [r7, #20]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d3f1      	bcc.n	80007d4 <_write+0x16>
	}
	return len;
 80007f0:	687b      	ldr	r3, [r7, #4]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <HAL_MspInit+0x44>)
 8000804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000806:	4a0e      	ldr	r2, [pc, #56]	; (8000840 <HAL_MspInit+0x44>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6613      	str	r3, [r2, #96]	; 0x60
 800080e:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <HAL_MspInit+0x44>)
 8000810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <HAL_MspInit+0x44>)
 800081c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <HAL_MspInit+0x44>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000824:	6593      	str	r3, [r2, #88]	; 0x58
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_MspInit+0x44>)
 8000828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000832:	f001 faf9 	bl	8001e28 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000

08000844 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a1c      	ldr	r2, [pc, #112]	; (80008d4 <HAL_FDCAN_MspInit+0x90>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d131      	bne.n	80008ca <HAL_FDCAN_MspInit+0x86>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <HAL_FDCAN_MspInit+0x94>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086a:	4a1b      	ldr	r2, [pc, #108]	; (80008d8 <HAL_FDCAN_MspInit+0x94>)
 800086c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000870:	6593      	str	r3, [r2, #88]	; 0x58
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <HAL_FDCAN_MspInit+0x94>)
 8000874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <HAL_FDCAN_MspInit+0x94>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a15      	ldr	r2, [pc, #84]	; (80008d8 <HAL_FDCAN_MspInit+0x94>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <HAL_FDCAN_MspInit+0x94>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000896:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800089a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80008a8:	2309      	movs	r3, #9
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b6:	f001 f847 	bl	8001948 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2100      	movs	r1, #0
 80008be:	2015      	movs	r0, #21
 80008c0:	f000 fa79 	bl	8000db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80008c4:	2015      	movs	r0, #21
 80008c6:	f000 fa90 	bl	8000dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80008ca:	bf00      	nop
 80008cc:	3728      	adds	r7, #40	; 0x28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40006400 	.word	0x40006400
 80008d8:	40021000 	.word	0x40021000

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <MemManage_Handler+0x4>

080008f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <UsageFault_Handler+0x4>

08000902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000930:	f000 f926 	bl	8000b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}

08000938 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */
//	my_FDCAN_RxFifo0Callback(&hfdcan1,FDCAN_IT_RX_FIFO0_NEW_MESSAGE);
  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800093c:	4802      	ldr	r0, [pc, #8]	; (8000948 <FDCAN1_IT0_IRQHandler+0x10>)
 800093e:	f000 fe0b 	bl	8001558 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200000b8 	.word	0x200000b8

0800094c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	e00a      	b.n	8000974 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800095e:	f3af 8000 	nop.w
 8000962:	4601      	mov	r1, r0
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	1c5a      	adds	r2, r3, #1
 8000968:	60ba      	str	r2, [r7, #8]
 800096a:	b2ca      	uxtb	r2, r1
 800096c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	3301      	adds	r3, #1
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697a      	ldr	r2, [r7, #20]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	429a      	cmp	r2, r3
 800097a:	dbf0      	blt.n	800095e <_read+0x12>
	}

return len;
 800097c:	687b      	ldr	r3, [r7, #4]
}
 800097e:	4618      	mov	r0, r3
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
	return -1;
 800098e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000992:	4618      	mov	r0, r3
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800099e:	b480      	push	{r7}
 80009a0:	b083      	sub	sp, #12
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
 80009a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ae:	605a      	str	r2, [r3, #4]
	return 0;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <_isatty>:

int _isatty(int file)
{
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
	return 1;
 80009c6:	2301      	movs	r3, #1
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
	return 0;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f8:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <_sbrk+0x5c>)
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <_sbrk+0x60>)
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <_sbrk+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d102      	bne.n	8000a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <_sbrk+0x64>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <_sbrk+0x68>)
 8000a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d207      	bcs.n	8000a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a20:	f002 f8fe 	bl	8002c20 <__errno>
 8000a24:	4602      	mov	r2, r0
 8000a26:	230c      	movs	r3, #12
 8000a28:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	e009      	b.n	8000a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <_sbrk+0x64>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <_sbrk+0x64>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <_sbrk+0x64>)
 8000a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a42:	68fb      	ldr	r3, [r7, #12]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20008000 	.word	0x20008000
 8000a50:	00000400 	.word	0x00000400
 8000a54:	20000094 	.word	0x20000094
 8000a58:	20000180 	.word	0x20000180

08000a5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <SystemInit+0x28>)
 8000a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a66:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <SystemInit+0x28>)
 8000a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <SystemInit+0x28>)
 8000a72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a76:	609a      	str	r2, [r3, #8]
#endif
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a8c:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8e:	490e      	ldr	r1, [pc, #56]	; (8000ac8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a90:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <LoopForever+0xe>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa4:	4c0b      	ldr	r4, [pc, #44]	; (8000ad4 <LoopForever+0x16>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ab2:	f7ff ffd3 	bl	8000a5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ab6:	f002 f8b9 	bl	8002c2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aba:	f7ff fc01 	bl	80002c0 <main>

08000abe <LoopForever>:

LoopForever:
    b LoopForever
 8000abe:	e7fe      	b.n	8000abe <LoopForever>
  ldr   r0, =_estack
 8000ac0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000acc:	08003f7c 	.word	0x08003f7c
  ldr r2, =_sbss
 8000ad0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ad4:	20000180 	.word	0x20000180

08000ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad8:	e7fe      	b.n	8000ad8 <ADC1_2_IRQHandler>

08000ada <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	f000 f95b 	bl	8000da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aea:	2000      	movs	r0, #0
 8000aec:	f000 f80e 	bl	8000b0c <HAL_InitTick>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d002      	beq.n	8000afc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	71fb      	strb	r3, [r7, #7]
 8000afa:	e001      	b.n	8000b00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000afc:	f7ff fe7e 	bl	80007fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b00:	79fb      	ldrb	r3, [r7, #7]

}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b14:	2300      	movs	r3, #0
 8000b16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b18:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <HAL_InitTick+0x68>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d022      	beq.n	8000b66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_InitTick+0x6c>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <HAL_InitTick+0x68>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 f966 	bl	8000e06 <HAL_SYSTICK_Config>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d10f      	bne.n	8000b60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b0f      	cmp	r3, #15
 8000b44:	d809      	bhi.n	8000b5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b46:	2200      	movs	r2, #0
 8000b48:	6879      	ldr	r1, [r7, #4]
 8000b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4e:	f000 f932 	bl	8000db6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <HAL_InitTick+0x70>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6013      	str	r3, [r2, #0]
 8000b58:	e007      	b.n	8000b6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	73fb      	strb	r3, [r7, #15]
 8000b5e:	e004      	b.n	8000b6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
 8000b64:	e001      	b.n	8000b6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	2000000c 	.word	0x2000000c
 8000b78:	20000004 	.word	0x20000004
 8000b7c:	20000008 	.word	0x20000008

08000b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_IncTick+0x1c>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	4a03      	ldr	r2, [pc, #12]	; (8000b9c <HAL_IncTick+0x1c>)
 8000b90:	6013      	str	r3, [r2, #0]
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	20000178 	.word	0x20000178
 8000ba0:	2000000c 	.word	0x2000000c

08000ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <HAL_GetTick+0x14>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000178 	.word	0x20000178

08000bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc4:	f7ff ffee 	bl	8000ba4 <HAL_GetTick>
 8000bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd4:	d004      	beq.n	8000be0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <HAL_Delay+0x40>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	4413      	add	r3, r2
 8000bde:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000be0:	bf00      	nop
 8000be2:	f7ff ffdf 	bl	8000ba4 <HAL_GetTick>
 8000be6:	4602      	mov	r2, r0
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d8f7      	bhi.n	8000be2 <HAL_Delay+0x26>
  {
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2000000c 	.word	0x2000000c

08000c00 <__NVIC_SetPriorityGrouping>:
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c32:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	60d3      	str	r3, [r2, #12]
}
 8000c38:	bf00      	nop
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_GetPriorityGrouping>:
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <__NVIC_GetPriorityGrouping+0x18>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	f003 0307 	and.w	r3, r3, #7
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_EnableIRQ>:
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	db0b      	blt.n	8000c8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	f003 021f 	and.w	r2, r3, #31
 8000c7c:	4907      	ldr	r1, [pc, #28]	; (8000c9c <__NVIC_EnableIRQ+0x38>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	095b      	lsrs	r3, r3, #5
 8000c84:	2001      	movs	r0, #1
 8000c86:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000e100 	.word	0xe000e100

08000ca0 <__NVIC_SetPriority>:
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db0a      	blt.n	8000cca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	490c      	ldr	r1, [pc, #48]	; (8000cec <__NVIC_SetPriority+0x4c>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	0112      	lsls	r2, r2, #4
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cc8:	e00a      	b.n	8000ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4908      	ldr	r1, [pc, #32]	; (8000cf0 <__NVIC_SetPriority+0x50>)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	3b04      	subs	r3, #4
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	440b      	add	r3, r1
 8000cde:	761a      	strb	r2, [r3, #24]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <NVIC_EncodePriority>:
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f1c3 0307 	rsb	r3, r3, #7
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	bf28      	it	cs
 8000d12:	2304      	movcs	r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d902      	bls.n	8000d24 <NVIC_EncodePriority+0x30>
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b03      	subs	r3, #3
 8000d22:	e000      	b.n	8000d26 <NVIC_EncodePriority+0x32>
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43da      	mvns	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	401a      	ands	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	43d9      	mvns	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	4313      	orrs	r3, r2
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3724      	adds	r7, #36	; 0x24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <SysTick_Config>:
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d6c:	d301      	bcc.n	8000d72 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e00f      	b.n	8000d92 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <SysTick_Config+0x40>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7a:	210f      	movs	r1, #15
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d80:	f7ff ff8e 	bl	8000ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <SysTick_Config+0x40>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8a:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <SysTick_Config+0x40>)
 8000d8c:	2207      	movs	r2, #7
 8000d8e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	e000e010 	.word	0xe000e010

08000da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ff29 	bl	8000c00 <__NVIC_SetPriorityGrouping>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc4:	f7ff ff40 	bl	8000c48 <__NVIC_GetPriorityGrouping>
 8000dc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	68b9      	ldr	r1, [r7, #8]
 8000dce:	6978      	ldr	r0, [r7, #20]
 8000dd0:	f7ff ff90 	bl	8000cf4 <NVIC_EncodePriority>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff5f 	bl	8000ca0 <__NVIC_SetPriority>
}
 8000de2:	bf00      	nop
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff33 	bl	8000c64 <__NVIC_EnableIRQ>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ffa4 	bl	8000d5c <SysTick_Config>
 8000e14:	4603      	mov	r3, r0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d101      	bne.n	8000e32 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e147      	b.n	80010c2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d106      	bne.n	8000e4c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff fcfc 	bl	8000844 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	699a      	ldr	r2, [r3, #24]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 0210 	bic.w	r2, r2, #16
 8000e5a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e5c:	f7ff fea2 	bl	8000ba4 <HAL_GetTick>
 8000e60:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000e62:	e012      	b.n	8000e8a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000e64:	f7ff fe9e 	bl	8000ba4 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b0a      	cmp	r3, #10
 8000e70:	d90b      	bls.n	8000e8a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e76:	f043 0201 	orr.w	r2, r3, #1
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2203      	movs	r2, #3
 8000e82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e11b      	b.n	80010c2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f003 0308 	and.w	r3, r3, #8
 8000e94:	2b08      	cmp	r3, #8
 8000e96:	d0e5      	beq.n	8000e64 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	699a      	ldr	r2, [r3, #24]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f042 0201 	orr.w	r2, r2, #1
 8000ea6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ea8:	f7ff fe7c 	bl	8000ba4 <HAL_GetTick>
 8000eac:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000eae:	e012      	b.n	8000ed6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000eb0:	f7ff fe78 	bl	8000ba4 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b0a      	cmp	r3, #10
 8000ebc:	d90b      	bls.n	8000ed6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec2:	f043 0201 	orr.w	r2, r3, #1
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2203      	movs	r2, #3
 8000ece:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e0f5      	b.n	80010c2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0e5      	beq.n	8000eb0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	699a      	ldr	r2, [r3, #24]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f042 0202 	orr.w	r2, r2, #2
 8000ef2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a74      	ldr	r2, [pc, #464]	; (80010cc <HAL_FDCAN_Init+0x2ac>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d103      	bne.n	8000f06 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000efe:	4a74      	ldr	r2, [pc, #464]	; (80010d0 <HAL_FDCAN_Init+0x2b0>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7c1b      	ldrb	r3, [r3, #16]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d108      	bne.n	8000f20 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	699a      	ldr	r2, [r3, #24]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f1c:	619a      	str	r2, [r3, #24]
 8000f1e:	e007      	b.n	8000f30 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	699a      	ldr	r2, [r3, #24]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f2e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	7c5b      	ldrb	r3, [r3, #17]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d108      	bne.n	8000f4a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	699a      	ldr	r2, [r3, #24]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f46:	619a      	str	r2, [r3, #24]
 8000f48:	e007      	b.n	8000f5a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	699a      	ldr	r2, [r3, #24]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f58:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	7c9b      	ldrb	r3, [r3, #18]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d108      	bne.n	8000f74 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	699a      	ldr	r2, [r3, #24]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f70:	619a      	str	r2, [r3, #24]
 8000f72:	e007      	b.n	8000f84 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	699a      	ldr	r2, [r3, #24]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f82:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	430a      	orrs	r2, r1
 8000f98:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	699a      	ldr	r2, [r3, #24]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000fa8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	691a      	ldr	r2, [r3, #16]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f022 0210 	bic.w	r2, r2, #16
 8000fb8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d108      	bne.n	8000fd4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	699a      	ldr	r2, [r3, #24]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f042 0204 	orr.w	r2, r2, #4
 8000fd0:	619a      	str	r2, [r3, #24]
 8000fd2:	e02c      	b.n	800102e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d028      	beq.n	800102e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d01c      	beq.n	800101e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	699a      	ldr	r2, [r3, #24]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ff2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	691a      	ldr	r2, [r3, #16]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f042 0210 	orr.w	r2, r2, #16
 8001002:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	2b03      	cmp	r3, #3
 800100a:	d110      	bne.n	800102e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	699a      	ldr	r2, [r3, #24]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f042 0220 	orr.w	r2, r2, #32
 800101a:	619a      	str	r2, [r3, #24]
 800101c:	e007      	b.n	800102e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	699a      	ldr	r2, [r3, #24]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f042 0220 	orr.w	r2, r2, #32
 800102c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	3b01      	subs	r3, #1
 8001034:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	3b01      	subs	r3, #1
 800103c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800103e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001046:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	3b01      	subs	r3, #1
 8001050:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001056:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001058:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001062:	d115      	bne.n	8001090 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001068:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106e:	3b01      	subs	r3, #1
 8001070:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001072:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	3b01      	subs	r3, #1
 800107a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800107c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	3b01      	subs	r3, #1
 8001086:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800108c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800108e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 fbf8 	bl	800189c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40006400 	.word	0x40006400
 80010d0:	40006500 	.word	0x40006500

080010d4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80010e4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80010e6:	7dfb      	ldrb	r3, [r7, #23]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d002      	beq.n	80010f2 <HAL_FDCAN_ConfigFilter+0x1e>
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d13d      	bne.n	800116e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d119      	bne.n	800112e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001106:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800110e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	e01d      	b.n	800116a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	075a      	lsls	r2, r3, #29
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	079a      	lsls	r2, r3, #30
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	4313      	orrs	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	4413      	add	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	3304      	adds	r3, #4
 8001162:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	e006      	b.n	800117c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001172:	f043 0202 	orr.w	r2, r3, #2
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
  }
}
 800117c:	4618      	mov	r0, r3
 800117e:	371c      	adds	r7, #28
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b01      	cmp	r3, #1
 800119a:	d110      	bne.n	80011be <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2202      	movs	r2, #2
 80011a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	699a      	ldr	r2, [r3, #24]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0201 	bic.w	r2, r2, #1
 80011b2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e006      	b.n	80011cc <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c2:	f043 0204 	orr.w	r2, r3, #4
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
  }
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80011d8:	b480      	push	{r7}
 80011da:	b08b      	sub	sp, #44	; 0x2c
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80011ec:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80011ee:	7efb      	ldrb	r3, [r7, #27]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	f040 80bc 	bne.w	800136e <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	2b40      	cmp	r3, #64	; 0x40
 80011fa:	d121      	bne.n	8001240 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001204:	f003 030f 	and.w	r3, r3, #15
 8001208:	2b00      	cmp	r3, #0
 800120a:	d107      	bne.n	800121c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001210:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e0af      	b.n	800137c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001230:	69fa      	ldr	r2, [r7, #28]
 8001232:	4613      	mov	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4413      	add	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	440b      	add	r3, r1
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
 800123e:	e020      	b.n	8001282 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001248:	f003 030f 	and.w	r3, r3, #15
 800124c:	2b00      	cmp	r3, #0
 800124e:	d107      	bne.n	8001260 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001254:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e08d      	b.n	800137c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001274:	69fa      	ldr	r2, [r7, #28]
 8001276:	4613      	mov	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	4413      	add	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	440b      	add	r3, r1
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d107      	bne.n	80012a6 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	0c9b      	lsrs	r3, r3, #18
 800129c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	e005      	b.n	80012b2 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	3304      	adds	r3, #4
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80012fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	0e1b      	lsrs	r3, r3, #24
 8001304:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	0fda      	lsrs	r2, r3, #31
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	3304      	adds	r3, #4
 800131a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
 8001324:	e00a      	b.n	800133c <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	441a      	add	r2, r3
 800132c:	6839      	ldr	r1, [r7, #0]
 800132e:	6a3b      	ldr	r3, [r7, #32]
 8001330:	440b      	add	r3, r1
 8001332:	7812      	ldrb	r2, [r2, #0]
 8001334:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001336:	6a3b      	ldr	r3, [r7, #32]
 8001338:	3301      	adds	r3, #1
 800133a:	623b      	str	r3, [r7, #32]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	0c1b      	lsrs	r3, r3, #16
 8001342:	4a11      	ldr	r2, [pc, #68]	; (8001388 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8001344:	5cd3      	ldrb	r3, [r2, r3]
 8001346:	461a      	mov	r2, r3
 8001348:	6a3b      	ldr	r3, [r7, #32]
 800134a:	4293      	cmp	r3, r2
 800134c:	d3eb      	bcc.n	8001326 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	2b40      	cmp	r3, #64	; 0x40
 8001352:	d105      	bne.n	8001360 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800135e:	e004      	b.n	800136a <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e006      	b.n	800137c <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001372:	f043 0208 	orr.w	r2, r3, #8
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
  }
}
 800137c:	4618      	mov	r0, r3
 800137e:	372c      	adds	r7, #44	; 0x2c
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	08003ecc 	.word	0x08003ecc

0800138c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800139e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80013a0:	7dfb      	ldrb	r3, [r7, #23]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d003      	beq.n	80013ae <HAL_FDCAN_ActivateNotification+0x22>
 80013a6:	7dfb      	ldrb	r3, [r7, #23]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	f040 80c8 	bne.w	800153e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d004      	beq.n	80013ca <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d03b      	beq.n	8001442 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d004      	beq.n	80013de <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d031      	beq.n	8001442 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d004      	beq.n	80013f2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d027      	beq.n	8001442 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d004      	beq.n	8001406 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	2b00      	cmp	r3, #0
 8001404:	d01d      	beq.n	8001442 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800140c:	2b00      	cmp	r3, #0
 800140e:	d004      	beq.n	800141a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	2b00      	cmp	r3, #0
 8001418:	d013      	beq.n	8001442 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001420:	2b00      	cmp	r3, #0
 8001422:	d004      	beq.n	800142e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	f003 0320 	and.w	r3, r3, #32
 800142a:	2b00      	cmp	r3, #0
 800142c:	d009      	beq.n	8001442 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00c      	beq.n	8001452 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800143e:	2b00      	cmp	r3, #0
 8001440:	d107      	bne.n	8001452 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f042 0201 	orr.w	r2, r2, #1
 8001450:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	2b00      	cmp	r3, #0
 800145a:	d004      	beq.n	8001466 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d13b      	bne.n	80014de <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800146c:	2b00      	cmp	r3, #0
 800146e:	d004      	beq.n	800147a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d131      	bne.n	80014de <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001480:	2b00      	cmp	r3, #0
 8001482:	d004      	beq.n	800148e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	2b00      	cmp	r3, #0
 800148c:	d127      	bne.n	80014de <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001494:	2b00      	cmp	r3, #0
 8001496:	d004      	beq.n	80014a2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d11d      	bne.n	80014de <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d004      	beq.n	80014b6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	f003 0310 	and.w	r3, r3, #16
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d113      	bne.n	80014de <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d004      	beq.n	80014ca <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	f003 0320 	and.w	r3, r3, #32
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d109      	bne.n	80014de <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00c      	beq.n	80014ee <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d007      	beq.n	80014ee <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f042 0202 	orr.w	r2, r2, #2
 80014ec:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d009      	beq.n	800150c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	430a      	orrs	r2, r1
 8001508:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001512:	2b00      	cmp	r3, #0
 8001514:	d009      	beq.n	800152a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	430a      	orrs	r2, r1
 8001526:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	430a      	orrs	r2, r1
 8001538:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e006      	b.n	800154c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001542:	f043 0202 	orr.w	r2, r3, #2
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
  }
}
 800154c:	4618      	mov	r0, r3
 800154e:	371c      	adds	r7, #28
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001566:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001574:	4013      	ands	r3, r2
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158a:	6a3a      	ldr	r2, [r7, #32]
 800158c:	4013      	ands	r3, r2
 800158e:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001596:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800159a:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a2:	69fa      	ldr	r2, [r7, #28]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015ae:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80015b2:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015ca:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	4013      	ands	r3, r2
 80015d6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00d      	beq.n	8001602 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2240      	movs	r2, #64	; 0x40
 80015fa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f92e 	bl	800185e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160c:	2b00      	cmp	r3, #0
 800160e:	d01b      	beq.n	8001648 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161a:	2b00      	cmp	r3, #0
 800161c:	d014      	beq.n	8001648 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001626:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800163e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001640:	6939      	ldr	r1, [r7, #16]
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f8ec 	bl	8001820 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	2b00      	cmp	r3, #0
 800164c:	d007      	beq.n	800165e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001654:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001656:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f8b6 	bl	80017ca <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800165e:	6a3b      	ldr	r3, [r7, #32]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d007      	beq.n	8001674 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6a3a      	ldr	r2, [r7, #32]
 800166a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800166c:	6a39      	ldr	r1, [r7, #32]
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff f81e 	bl	80006b0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d007      	beq.n	800168a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001682:	69f9      	ldr	r1, [r7, #28]
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 f8ab 	bl	80017e0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00e      	beq.n	80016b6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d007      	beq.n	80016b6 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ae:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 f8a0 	bl	80017f6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d01a      	beq.n	80016fa <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d013      	beq.n	80016fa <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80016da:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	4013      	ands	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80016f2:	68f9      	ldr	r1, [r7, #12]
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 f888 	bl	800180a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00e      	beq.n	8001726 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d007      	beq.n	8001726 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800171e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 f888 	bl	8001836 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800172c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00e      	beq.n	8001752 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d007      	beq.n	8001752 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800174a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 f87c 	bl	800184a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d011      	beq.n	8001784 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00a      	beq.n	8001784 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001776:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d007      	beq.n	800179a <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001792:	6979      	ldr	r1, [r7, #20]
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 f876 	bl	8001886 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d009      	beq.n	80017b4 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d002      	beq.n	80017c2 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 f858 	bl	8001872 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80017c2:	bf00      	nop
 80017c4:	3728      	adds	r7, #40	; 0x28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80018a4:	4b27      	ldr	r3, [pc, #156]	; (8001944 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80018a6:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018b6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018be:	041a      	lsls	r2, r3, #16
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018dc:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e4:	061a      	lsls	r2, r3, #24
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	e005      	b.n	800192a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3304      	adds	r3, #4
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	429a      	cmp	r2, r3
 8001934:	d3f3      	bcc.n	800191e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001936:	bf00      	nop
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	4000a400 	.word	0x4000a400

08001948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001948:	b480      	push	{r7}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001956:	e15a      	b.n	8001c0e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	2101      	movs	r1, #1
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	4013      	ands	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 814c 	beq.w	8001c08 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d00b      	beq.n	8001990 <HAL_GPIO_Init+0x48>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d007      	beq.n	8001990 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001984:	2b11      	cmp	r3, #17
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b12      	cmp	r3, #18
 800198e:	d130      	bne.n	80019f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	2203      	movs	r2, #3
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019c6:	2201      	movs	r2, #1
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	091b      	lsrs	r3, r3, #4
 80019dc:	f003 0201 	and.w	r2, r3, #1
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	2203      	movs	r2, #3
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0xea>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b12      	cmp	r3, #18
 8001a30:	d123      	bne.n	8001a7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	08da      	lsrs	r2, r3, #3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3208      	adds	r2, #8
 8001a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	220f      	movs	r2, #15
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	691a      	ldr	r2, [r3, #16]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	08da      	lsrs	r2, r3, #3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3208      	adds	r2, #8
 8001a74:	6939      	ldr	r1, [r7, #16]
 8001a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 0203 	and.w	r2, r3, #3
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 80a6 	beq.w	8001c08 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abc:	4b5b      	ldr	r3, [pc, #364]	; (8001c2c <HAL_GPIO_Init+0x2e4>)
 8001abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac0:	4a5a      	ldr	r2, [pc, #360]	; (8001c2c <HAL_GPIO_Init+0x2e4>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6613      	str	r3, [r2, #96]	; 0x60
 8001ac8:	4b58      	ldr	r3, [pc, #352]	; (8001c2c <HAL_GPIO_Init+0x2e4>)
 8001aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ad4:	4a56      	ldr	r2, [pc, #344]	; (8001c30 <HAL_GPIO_Init+0x2e8>)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	3302      	adds	r3, #2
 8001adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220f      	movs	r2, #15
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001afe:	d01f      	beq.n	8001b40 <HAL_GPIO_Init+0x1f8>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a4c      	ldr	r2, [pc, #304]	; (8001c34 <HAL_GPIO_Init+0x2ec>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d019      	beq.n	8001b3c <HAL_GPIO_Init+0x1f4>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a4b      	ldr	r2, [pc, #300]	; (8001c38 <HAL_GPIO_Init+0x2f0>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d013      	beq.n	8001b38 <HAL_GPIO_Init+0x1f0>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a4a      	ldr	r2, [pc, #296]	; (8001c3c <HAL_GPIO_Init+0x2f4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d00d      	beq.n	8001b34 <HAL_GPIO_Init+0x1ec>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a49      	ldr	r2, [pc, #292]	; (8001c40 <HAL_GPIO_Init+0x2f8>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d007      	beq.n	8001b30 <HAL_GPIO_Init+0x1e8>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a48      	ldr	r2, [pc, #288]	; (8001c44 <HAL_GPIO_Init+0x2fc>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d101      	bne.n	8001b2c <HAL_GPIO_Init+0x1e4>
 8001b28:	2305      	movs	r3, #5
 8001b2a:	e00a      	b.n	8001b42 <HAL_GPIO_Init+0x1fa>
 8001b2c:	2306      	movs	r3, #6
 8001b2e:	e008      	b.n	8001b42 <HAL_GPIO_Init+0x1fa>
 8001b30:	2304      	movs	r3, #4
 8001b32:	e006      	b.n	8001b42 <HAL_GPIO_Init+0x1fa>
 8001b34:	2303      	movs	r3, #3
 8001b36:	e004      	b.n	8001b42 <HAL_GPIO_Init+0x1fa>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e002      	b.n	8001b42 <HAL_GPIO_Init+0x1fa>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <HAL_GPIO_Init+0x1fa>
 8001b40:	2300      	movs	r3, #0
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	f002 0203 	and.w	r2, r2, #3
 8001b48:	0092      	lsls	r2, r2, #2
 8001b4a:	4093      	lsls	r3, r2
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b52:	4937      	ldr	r1, [pc, #220]	; (8001c30 <HAL_GPIO_Init+0x2e8>)
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	089b      	lsrs	r3, r3, #2
 8001b58:	3302      	adds	r3, #2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b60:	4b39      	ldr	r3, [pc, #228]	; (8001c48 <HAL_GPIO_Init+0x300>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b84:	4a30      	ldr	r2, [pc, #192]	; (8001c48 <HAL_GPIO_Init+0x300>)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001b8a:	4b2f      	ldr	r3, [pc, #188]	; (8001c48 <HAL_GPIO_Init+0x300>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4013      	ands	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bae:	4a26      	ldr	r2, [pc, #152]	; (8001c48 <HAL_GPIO_Init+0x300>)
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bb4:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <HAL_GPIO_Init+0x300>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bd8:	4a1b      	ldr	r2, [pc, #108]	; (8001c48 <HAL_GPIO_Init+0x300>)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bde:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <HAL_GPIO_Init+0x300>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c02:	4a11      	ldr	r2, [pc, #68]	; (8001c48 <HAL_GPIO_Init+0x300>)
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f47f ae9d 	bne.w	8001958 <HAL_GPIO_Init+0x10>
  }
}
 8001c1e:	bf00      	nop
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40010000 	.word	0x40010000
 8001c34:	48000400 	.word	0x48000400
 8001c38:	48000800 	.word	0x48000800
 8001c3c:	48000c00 	.word	0x48000c00
 8001c40:	48001000 	.word	0x48001000
 8001c44:	48001400 	.word	0x48001400
 8001c48:	40010400 	.word	0x40010400

08001c4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	887b      	ldrh	r3, [r7, #2]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
 8001c68:	e001      	b.n	8001c6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c8c:	787b      	ldrb	r3, [r7, #1]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c92:	887a      	ldrh	r2, [r7, #2]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c98:	e002      	b.n	8001ca0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c9a:	887a      	ldrh	r2, [r7, #2]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cbe:	887a      	ldrh	r2, [r7, #2]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	041a      	lsls	r2, r3, #16
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	43d9      	mvns	r1, r3
 8001cca:	887b      	ldrh	r3, [r7, #2]
 8001ccc:	400b      	ands	r3, r1
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	619a      	str	r2, [r3, #24]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d141      	bne.n	8001d72 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cee:	4b4b      	ldr	r3, [pc, #300]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cfa:	d131      	bne.n	8001d60 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cfc:	4b47      	ldr	r3, [pc, #284]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d02:	4a46      	ldr	r2, [pc, #280]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d0c:	4b43      	ldr	r3, [pc, #268]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d14:	4a41      	ldr	r2, [pc, #260]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d1c:	4b40      	ldr	r3, [pc, #256]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2232      	movs	r2, #50	; 0x32
 8001d22:	fb02 f303 	mul.w	r3, r2, r3
 8001d26:	4a3f      	ldr	r2, [pc, #252]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d28:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2c:	0c9b      	lsrs	r3, r3, #18
 8001d2e:	3301      	adds	r3, #1
 8001d30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d32:	e002      	b.n	8001d3a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d3a:	4b38      	ldr	r3, [pc, #224]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d46:	d102      	bne.n	8001d4e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f2      	bne.n	8001d34 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d4e:	4b33      	ldr	r3, [pc, #204]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d5a:	d158      	bne.n	8001e0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e057      	b.n	8001e10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d60:	4b2e      	ldr	r3, [pc, #184]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d66:	4a2d      	ldr	r2, [pc, #180]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d70:	e04d      	b.n	8001e0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d78:	d141      	bne.n	8001dfe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d7a:	4b28      	ldr	r3, [pc, #160]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d86:	d131      	bne.n	8001dec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d88:	4b24      	ldr	r3, [pc, #144]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d8e:	4a23      	ldr	r2, [pc, #140]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d98:	4b20      	ldr	r3, [pc, #128]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001da0:	4a1e      	ldr	r2, [pc, #120]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001da6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001da8:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2232      	movs	r2, #50	; 0x32
 8001dae:	fb02 f303 	mul.w	r3, r2, r3
 8001db2:	4a1c      	ldr	r2, [pc, #112]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001db4:	fba2 2303 	umull	r2, r3, r2, r3
 8001db8:	0c9b      	lsrs	r3, r3, #18
 8001dba:	3301      	adds	r3, #1
 8001dbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dbe:	e002      	b.n	8001dc6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd2:	d102      	bne.n	8001dda <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f2      	bne.n	8001dc0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de6:	d112      	bne.n	8001e0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e011      	b.n	8001e10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001df2:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001dfc:	e007      	b.n	8001e0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e06:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e0c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	40007000 	.word	0x40007000
 8001e20:	20000004 	.word	0x20000004
 8001e24:	431bde83 	.word	0x431bde83

08001e28 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e36:	6093      	str	r3, [r2, #8]
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40007000 	.word	0x40007000

08001e48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e308      	b.n	800246c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d075      	beq.n	8001f52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e66:	4ba3      	ldr	r3, [pc, #652]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e70:	4ba0      	ldr	r3, [pc, #640]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	2b0c      	cmp	r3, #12
 8001e7e:	d102      	bne.n	8001e86 <HAL_RCC_OscConfig+0x3e>
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	d002      	beq.n	8001e8c <HAL_RCC_OscConfig+0x44>
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d10b      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8c:	4b99      	ldr	r3, [pc, #612]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d05b      	beq.n	8001f50 <HAL_RCC_OscConfig+0x108>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d157      	bne.n	8001f50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e2e3      	b.n	800246c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eac:	d106      	bne.n	8001ebc <HAL_RCC_OscConfig+0x74>
 8001eae:	4b91      	ldr	r3, [pc, #580]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a90      	ldr	r2, [pc, #576]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e01d      	b.n	8001ef8 <HAL_RCC_OscConfig+0xb0>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec4:	d10c      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x98>
 8001ec6:	4b8b      	ldr	r3, [pc, #556]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a8a      	ldr	r2, [pc, #552]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	4b88      	ldr	r3, [pc, #544]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a87      	ldr	r2, [pc, #540]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	e00b      	b.n	8001ef8 <HAL_RCC_OscConfig+0xb0>
 8001ee0:	4b84      	ldr	r3, [pc, #528]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a83      	ldr	r2, [pc, #524]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b81      	ldr	r3, [pc, #516]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a80      	ldr	r2, [pc, #512]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d013      	beq.n	8001f28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7fe fe50 	bl	8000ba4 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f08:	f7fe fe4c 	bl	8000ba4 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	; 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e2a8      	b.n	800246c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f1a:	4b76      	ldr	r3, [pc, #472]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0xc0>
 8001f26:	e014      	b.n	8001f52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7fe fe3c 	bl	8000ba4 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f30:	f7fe fe38 	bl	8000ba4 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	; 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e294      	b.n	800246c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f42:	4b6c      	ldr	r3, [pc, #432]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0xe8>
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d075      	beq.n	800204a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f5e:	4b65      	ldr	r3, [pc, #404]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f68:	4b62      	ldr	r3, [pc, #392]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	2b0c      	cmp	r3, #12
 8001f76:	d102      	bne.n	8001f7e <HAL_RCC_OscConfig+0x136>
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d002      	beq.n	8001f84 <HAL_RCC_OscConfig+0x13c>
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d11f      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f84:	4b5b      	ldr	r3, [pc, #364]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <HAL_RCC_OscConfig+0x154>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e267      	b.n	800246c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9c:	4b55      	ldr	r3, [pc, #340]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	061b      	lsls	r3, r3, #24
 8001faa:	4952      	ldr	r1, [pc, #328]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fb0:	4b51      	ldr	r3, [pc, #324]	; (80020f8 <HAL_RCC_OscConfig+0x2b0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fda9 	bl	8000b0c <HAL_InitTick>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d043      	beq.n	8002048 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e253      	b.n	800246c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d023      	beq.n	8002014 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fcc:	4b49      	ldr	r3, [pc, #292]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a48      	ldr	r2, [pc, #288]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7fe fde4 	bl	8000ba4 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe0:	f7fe fde0 	bl	8000ba4 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e23c      	b.n	800246c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ff2:	4b40      	ldr	r3, [pc, #256]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffe:	4b3d      	ldr	r3, [pc, #244]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	061b      	lsls	r3, r3, #24
 800200c:	4939      	ldr	r1, [pc, #228]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
 8002012:	e01a      	b.n	800204a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002014:	4b37      	ldr	r3, [pc, #220]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a36      	ldr	r2, [pc, #216]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 800201a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800201e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7fe fdc0 	bl	8000ba4 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002028:	f7fe fdbc 	bl	8000ba4 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e218      	b.n	800246c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800203a:	4b2e      	ldr	r3, [pc, #184]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x1e0>
 8002046:	e000      	b.n	800204a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002048:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	d03c      	beq.n	80020d0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d01c      	beq.n	8002098 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800205e:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8002060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002064:	4a23      	ldr	r2, [pc, #140]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206e:	f7fe fd99 	bl	8000ba4 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002076:	f7fe fd95 	bl	8000ba4 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e1f1      	b.n	800246c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 800208a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0ef      	beq.n	8002076 <HAL_RCC_OscConfig+0x22e>
 8002096:	e01b      	b.n	80020d0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002098:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 800209a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800209e:	4a15      	ldr	r2, [pc, #84]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	f023 0301 	bic.w	r3, r3, #1
 80020a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a8:	f7fe fd7c 	bl	8000ba4 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b0:	f7fe fd78 	bl	8000ba4 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e1d4      	b.n	800246c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1ef      	bne.n	80020b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 80ab 	beq.w	8002234 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020e2:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d106      	bne.n	80020fc <HAL_RCC_OscConfig+0x2b4>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e005      	b.n	80020fe <HAL_RCC_OscConfig+0x2b6>
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	20000008 	.word	0x20000008
 80020fc:	2300      	movs	r3, #0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00d      	beq.n	800211e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	4baf      	ldr	r3, [pc, #700]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 8002104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002106:	4aae      	ldr	r2, [pc, #696]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210c:	6593      	str	r3, [r2, #88]	; 0x58
 800210e:	4bac      	ldr	r3, [pc, #688]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800211a:	2301      	movs	r3, #1
 800211c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800211e:	4ba9      	ldr	r3, [pc, #676]	; (80023c4 <HAL_RCC_OscConfig+0x57c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002126:	2b00      	cmp	r3, #0
 8002128:	d118      	bne.n	800215c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800212a:	4ba6      	ldr	r3, [pc, #664]	; (80023c4 <HAL_RCC_OscConfig+0x57c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4aa5      	ldr	r2, [pc, #660]	; (80023c4 <HAL_RCC_OscConfig+0x57c>)
 8002130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002136:	f7fe fd35 	bl	8000ba4 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213e:	f7fe fd31 	bl	8000ba4 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e18d      	b.n	800246c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002150:	4b9c      	ldr	r3, [pc, #624]	; (80023c4 <HAL_RCC_OscConfig+0x57c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d108      	bne.n	8002176 <HAL_RCC_OscConfig+0x32e>
 8002164:	4b96      	ldr	r3, [pc, #600]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 8002166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216a:	4a95      	ldr	r2, [pc, #596]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002174:	e024      	b.n	80021c0 <HAL_RCC_OscConfig+0x378>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b05      	cmp	r3, #5
 800217c:	d110      	bne.n	80021a0 <HAL_RCC_OscConfig+0x358>
 800217e:	4b90      	ldr	r3, [pc, #576]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 8002180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002184:	4a8e      	ldr	r2, [pc, #568]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 8002186:	f043 0304 	orr.w	r3, r3, #4
 800218a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800218e:	4b8c      	ldr	r3, [pc, #560]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 8002190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002194:	4a8a      	ldr	r2, [pc, #552]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800219e:	e00f      	b.n	80021c0 <HAL_RCC_OscConfig+0x378>
 80021a0:	4b87      	ldr	r3, [pc, #540]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a6:	4a86      	ldr	r2, [pc, #536]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 80021a8:	f023 0301 	bic.w	r3, r3, #1
 80021ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021b0:	4b83      	ldr	r3, [pc, #524]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 80021b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b6:	4a82      	ldr	r2, [pc, #520]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 80021b8:	f023 0304 	bic.w	r3, r3, #4
 80021bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d016      	beq.n	80021f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c8:	f7fe fcec 	bl	8000ba4 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d0:	f7fe fce8 	bl	8000ba4 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	; 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e142      	b.n	800246c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021e6:	4b76      	ldr	r3, [pc, #472]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 80021e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0ed      	beq.n	80021d0 <HAL_RCC_OscConfig+0x388>
 80021f4:	e015      	b.n	8002222 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f6:	f7fe fcd5 	bl	8000ba4 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021fc:	e00a      	b.n	8002214 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fe:	f7fe fcd1 	bl	8000ba4 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	f241 3288 	movw	r2, #5000	; 0x1388
 800220c:	4293      	cmp	r3, r2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e12b      	b.n	800246c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002214:	4b6a      	ldr	r3, [pc, #424]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1ed      	bne.n	80021fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002222:	7ffb      	ldrb	r3, [r7, #31]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d105      	bne.n	8002234 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002228:	4b65      	ldr	r3, [pc, #404]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 800222a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222c:	4a64      	ldr	r2, [pc, #400]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 800222e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002232:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b00      	cmp	r3, #0
 800223e:	d03c      	beq.n	80022ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01c      	beq.n	8002282 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002248:	4b5d      	ldr	r3, [pc, #372]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 800224a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800224e:	4a5c      	ldr	r2, [pc, #368]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7fe fca4 	bl	8000ba4 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002260:	f7fe fca0 	bl	8000ba4 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e0fc      	b.n	800246c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002272:	4b53      	ldr	r3, [pc, #332]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 8002274:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0ef      	beq.n	8002260 <HAL_RCC_OscConfig+0x418>
 8002280:	e01b      	b.n	80022ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002282:	4b4f      	ldr	r3, [pc, #316]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 8002284:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002288:	4a4d      	ldr	r2, [pc, #308]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 800228a:	f023 0301 	bic.w	r3, r3, #1
 800228e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002292:	f7fe fc87 	bl	8000ba4 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800229a:	f7fe fc83 	bl	8000ba4 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e0df      	b.n	800246c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022ac:	4b44      	ldr	r3, [pc, #272]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 80022ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1ef      	bne.n	800229a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80d3 	beq.w	800246a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022c4:	4b3e      	ldr	r3, [pc, #248]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 030c 	and.w	r3, r3, #12
 80022cc:	2b0c      	cmp	r3, #12
 80022ce:	f000 808d 	beq.w	80023ec <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d15a      	bne.n	8002390 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022da:	4b39      	ldr	r3, [pc, #228]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a38      	ldr	r2, [pc, #224]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 80022e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e6:	f7fe fc5d 	bl	8000ba4 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ee:	f7fe fc59 	bl	8000ba4 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e0b5      	b.n	800246c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002300:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f0      	bne.n	80022ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800230c:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <HAL_RCC_OscConfig+0x580>)
 8002312:	4013      	ands	r3, r2
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6a11      	ldr	r1, [r2, #32]
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800231c:	3a01      	subs	r2, #1
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	4311      	orrs	r1, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002326:	0212      	lsls	r2, r2, #8
 8002328:	4311      	orrs	r1, r2
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800232e:	0852      	lsrs	r2, r2, #1
 8002330:	3a01      	subs	r2, #1
 8002332:	0552      	lsls	r2, r2, #21
 8002334:	4311      	orrs	r1, r2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800233a:	0852      	lsrs	r2, r2, #1
 800233c:	3a01      	subs	r2, #1
 800233e:	0652      	lsls	r2, r2, #25
 8002340:	4311      	orrs	r1, r2
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002346:	06d2      	lsls	r2, r2, #27
 8002348:	430a      	orrs	r2, r1
 800234a:	491d      	ldr	r1, [pc, #116]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 800234c:	4313      	orrs	r3, r2
 800234e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a1a      	ldr	r2, [pc, #104]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 8002356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800235a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800235c:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4a17      	ldr	r2, [pc, #92]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 8002362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002366:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe fc1c 	bl	8000ba4 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002370:	f7fe fc18 	bl	8000ba4 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e074      	b.n	800246c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002382:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0x528>
 800238e:	e06c      	b.n	800246a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a0a      	ldr	r2, [pc, #40]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 8002396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800239a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	4a07      	ldr	r2, [pc, #28]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 80023a2:	f023 0303 	bic.w	r3, r3, #3
 80023a6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <HAL_RCC_OscConfig+0x578>)
 80023ae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80023b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe fbf4 	bl	8000ba4 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023be:	e00e      	b.n	80023de <HAL_RCC_OscConfig+0x596>
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40007000 	.word	0x40007000
 80023c8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023cc:	f7fe fbea 	bl	8000ba4 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e046      	b.n	800246c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023de:	4b25      	ldr	r3, [pc, #148]	; (8002474 <HAL_RCC_OscConfig+0x62c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x584>
 80023ea:	e03e      	b.n	800246a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e039      	b.n	800246c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80023f8:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <HAL_RCC_OscConfig+0x62c>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f003 0203 	and.w	r2, r3, #3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	429a      	cmp	r2, r3
 800240a:	d12c      	bne.n	8002466 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	3b01      	subs	r3, #1
 8002418:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241a:	429a      	cmp	r2, r3
 800241c:	d123      	bne.n	8002466 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d11b      	bne.n	8002466 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800243a:	429a      	cmp	r2, r3
 800243c:	d113      	bne.n	8002466 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	085b      	lsrs	r3, r3, #1
 800244a:	3b01      	subs	r3, #1
 800244c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800244e:	429a      	cmp	r2, r3
 8002450:	d109      	bne.n	8002466 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245c:	085b      	lsrs	r3, r3, #1
 800245e:	3b01      	subs	r3, #1
 8002460:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002462:	429a      	cmp	r2, r3
 8002464:	d001      	beq.n	800246a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3720      	adds	r7, #32
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021000 	.word	0x40021000

08002478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e11e      	b.n	80026ce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002490:	4b91      	ldr	r3, [pc, #580]	; (80026d8 <HAL_RCC_ClockConfig+0x260>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 030f 	and.w	r3, r3, #15
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d910      	bls.n	80024c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249e:	4b8e      	ldr	r3, [pc, #568]	; (80026d8 <HAL_RCC_ClockConfig+0x260>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 020f 	bic.w	r2, r3, #15
 80024a6:	498c      	ldr	r1, [pc, #560]	; (80026d8 <HAL_RCC_ClockConfig+0x260>)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	4b8a      	ldr	r3, [pc, #552]	; (80026d8 <HAL_RCC_ClockConfig+0x260>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e106      	b.n	80026ce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d073      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d129      	bne.n	8002528 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d4:	4b81      	ldr	r3, [pc, #516]	; (80026dc <HAL_RCC_ClockConfig+0x264>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0f4      	b.n	80026ce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80024e4:	f000 f966 	bl	80027b4 <RCC_GetSysClockFreqFromPLLSource>
 80024e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4a7c      	ldr	r2, [pc, #496]	; (80026e0 <HAL_RCC_ClockConfig+0x268>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d93f      	bls.n	8002572 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024f2:	4b7a      	ldr	r3, [pc, #488]	; (80026dc <HAL_RCC_ClockConfig+0x264>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002506:	2b00      	cmp	r3, #0
 8002508:	d033      	beq.n	8002572 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800250e:	2b00      	cmp	r3, #0
 8002510:	d12f      	bne.n	8002572 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002512:	4b72      	ldr	r3, [pc, #456]	; (80026dc <HAL_RCC_ClockConfig+0x264>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800251a:	4a70      	ldr	r2, [pc, #448]	; (80026dc <HAL_RCC_ClockConfig+0x264>)
 800251c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002520:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	e024      	b.n	8002572 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d107      	bne.n	8002540 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002530:	4b6a      	ldr	r3, [pc, #424]	; (80026dc <HAL_RCC_ClockConfig+0x264>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d109      	bne.n	8002550 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0c6      	b.n	80026ce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002540:	4b66      	ldr	r3, [pc, #408]	; (80026dc <HAL_RCC_ClockConfig+0x264>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0be      	b.n	80026ce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002550:	f000 f8ce 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 8002554:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4a61      	ldr	r2, [pc, #388]	; (80026e0 <HAL_RCC_ClockConfig+0x268>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d909      	bls.n	8002572 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800255e:	4b5f      	ldr	r3, [pc, #380]	; (80026dc <HAL_RCC_ClockConfig+0x264>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002566:	4a5d      	ldr	r2, [pc, #372]	; (80026dc <HAL_RCC_ClockConfig+0x264>)
 8002568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800256c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002572:	4b5a      	ldr	r3, [pc, #360]	; (80026dc <HAL_RCC_ClockConfig+0x264>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f023 0203 	bic.w	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4957      	ldr	r1, [pc, #348]	; (80026dc <HAL_RCC_ClockConfig+0x264>)
 8002580:	4313      	orrs	r3, r2
 8002582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002584:	f7fe fb0e 	bl	8000ba4 <HAL_GetTick>
 8002588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800258c:	f7fe fb0a 	bl	8000ba4 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	; 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e095      	b.n	80026ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a2:	4b4e      	ldr	r3, [pc, #312]	; (80026dc <HAL_RCC_ClockConfig+0x264>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 020c 	and.w	r2, r3, #12
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d1eb      	bne.n	800258c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d023      	beq.n	8002608 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025cc:	4b43      	ldr	r3, [pc, #268]	; (80026dc <HAL_RCC_ClockConfig+0x264>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	4a42      	ldr	r2, [pc, #264]	; (80026dc <HAL_RCC_ClockConfig+0x264>)
 80025d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0308 	and.w	r3, r3, #8
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d007      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80025e4:	4b3d      	ldr	r3, [pc, #244]	; (80026dc <HAL_RCC_ClockConfig+0x264>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80025ec:	4a3b      	ldr	r2, [pc, #236]	; (80026dc <HAL_RCC_ClockConfig+0x264>)
 80025ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f4:	4b39      	ldr	r3, [pc, #228]	; (80026dc <HAL_RCC_ClockConfig+0x264>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4936      	ldr	r1, [pc, #216]	; (80026dc <HAL_RCC_ClockConfig+0x264>)
 8002602:	4313      	orrs	r3, r2
 8002604:	608b      	str	r3, [r1, #8]
 8002606:	e008      	b.n	800261a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	2b80      	cmp	r3, #128	; 0x80
 800260c:	d105      	bne.n	800261a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800260e:	4b33      	ldr	r3, [pc, #204]	; (80026dc <HAL_RCC_ClockConfig+0x264>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	4a32      	ldr	r2, [pc, #200]	; (80026dc <HAL_RCC_ClockConfig+0x264>)
 8002614:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002618:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800261a:	4b2f      	ldr	r3, [pc, #188]	; (80026d8 <HAL_RCC_ClockConfig+0x260>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d21d      	bcs.n	8002664 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002628:	4b2b      	ldr	r3, [pc, #172]	; (80026d8 <HAL_RCC_ClockConfig+0x260>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f023 020f 	bic.w	r2, r3, #15
 8002630:	4929      	ldr	r1, [pc, #164]	; (80026d8 <HAL_RCC_ClockConfig+0x260>)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	4313      	orrs	r3, r2
 8002636:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002638:	f7fe fab4 	bl	8000ba4 <HAL_GetTick>
 800263c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	e00a      	b.n	8002656 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002640:	f7fe fab0 	bl	8000ba4 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	; 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e03b      	b.n	80026ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002656:	4b20      	ldr	r3, [pc, #128]	; (80026d8 <HAL_RCC_ClockConfig+0x260>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d1ed      	bne.n	8002640 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002670:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <HAL_RCC_ClockConfig+0x264>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4917      	ldr	r1, [pc, #92]	; (80026dc <HAL_RCC_ClockConfig+0x264>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800268e:	4b13      	ldr	r3, [pc, #76]	; (80026dc <HAL_RCC_ClockConfig+0x264>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	490f      	ldr	r1, [pc, #60]	; (80026dc <HAL_RCC_ClockConfig+0x264>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026a2:	f000 f825 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 80026a6:	4601      	mov	r1, r0
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <HAL_RCC_ClockConfig+0x264>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	4a0c      	ldr	r2, [pc, #48]	; (80026e4 <HAL_RCC_ClockConfig+0x26c>)
 80026b4:	5cd3      	ldrb	r3, [r2, r3]
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	fa21 f303 	lsr.w	r3, r1, r3
 80026be:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <HAL_RCC_ClockConfig+0x270>)
 80026c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80026c2:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <HAL_RCC_ClockConfig+0x274>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe fa20 	bl	8000b0c <HAL_InitTick>
 80026cc:	4603      	mov	r3, r0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40022000 	.word	0x40022000
 80026dc:	40021000 	.word	0x40021000
 80026e0:	04c4b400 	.word	0x04c4b400
 80026e4:	08003ebc 	.word	0x08003ebc
 80026e8:	20000004 	.word	0x20000004
 80026ec:	20000008 	.word	0x20000008

080026f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026f6:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 030c 	and.w	r3, r3, #12
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d102      	bne.n	8002708 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002702:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	e047      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002708:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 030c 	and.w	r3, r3, #12
 8002710:	2b08      	cmp	r3, #8
 8002712:	d102      	bne.n	800271a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002714:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	e03e      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800271a:	4b23      	ldr	r3, [pc, #140]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
 8002722:	2b0c      	cmp	r3, #12
 8002724:	d136      	bne.n	8002794 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002730:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	091b      	lsrs	r3, r3, #4
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	3301      	adds	r3, #1
 800273c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b03      	cmp	r3, #3
 8002742:	d10c      	bne.n	800275e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002744:	4a1a      	ldr	r2, [pc, #104]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	fbb2 f3f3 	udiv	r3, r2, r3
 800274c:	4a16      	ldr	r2, [pc, #88]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800274e:	68d2      	ldr	r2, [r2, #12]
 8002750:	0a12      	lsrs	r2, r2, #8
 8002752:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002756:	fb02 f303 	mul.w	r3, r2, r3
 800275a:	617b      	str	r3, [r7, #20]
      break;
 800275c:	e00c      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800275e:	4a13      	ldr	r2, [pc, #76]	; (80027ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	fbb2 f3f3 	udiv	r3, r2, r3
 8002766:	4a10      	ldr	r2, [pc, #64]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002768:	68d2      	ldr	r2, [r2, #12]
 800276a:	0a12      	lsrs	r2, r2, #8
 800276c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002770:	fb02 f303 	mul.w	r3, r2, r3
 8002774:	617b      	str	r3, [r7, #20]
      break;
 8002776:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	0e5b      	lsrs	r3, r3, #25
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	3301      	adds	r3, #1
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	e001      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002798:	693b      	ldr	r3, [r7, #16]
}
 800279a:	4618      	mov	r0, r3
 800279c:	371c      	adds	r7, #28
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000
 80027ac:	00f42400 	.word	0x00f42400
 80027b0:	016e3600 	.word	0x016e3600

080027b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027ba:	4b1e      	ldr	r3, [pc, #120]	; (8002834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027c4:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	3301      	adds	r3, #1
 80027d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d10c      	bne.n	80027f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027d8:	4a17      	ldr	r2, [pc, #92]	; (8002838 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e0:	4a14      	ldr	r2, [pc, #80]	; (8002834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027e2:	68d2      	ldr	r2, [r2, #12]
 80027e4:	0a12      	lsrs	r2, r2, #8
 80027e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027ea:	fb02 f303 	mul.w	r3, r2, r3
 80027ee:	617b      	str	r3, [r7, #20]
    break;
 80027f0:	e00c      	b.n	800280c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027f2:	4a12      	ldr	r2, [pc, #72]	; (800283c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fa:	4a0e      	ldr	r2, [pc, #56]	; (8002834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027fc:	68d2      	ldr	r2, [r2, #12]
 80027fe:	0a12      	lsrs	r2, r2, #8
 8002800:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002804:	fb02 f303 	mul.w	r3, r2, r3
 8002808:	617b      	str	r3, [r7, #20]
    break;
 800280a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800280c:	4b09      	ldr	r3, [pc, #36]	; (8002834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	0e5b      	lsrs	r3, r3, #25
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	3301      	adds	r3, #1
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	fbb2 f3f3 	udiv	r3, r2, r3
 8002824:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002826:	687b      	ldr	r3, [r7, #4]
}
 8002828:	4618      	mov	r0, r3
 800282a:	371c      	adds	r7, #28
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	40021000 	.word	0x40021000
 8002838:	016e3600 	.word	0x016e3600
 800283c:	00f42400 	.word	0x00f42400

08002840 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002848:	2300      	movs	r3, #0
 800284a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800284c:	2300      	movs	r3, #0
 800284e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8098 	beq.w	800298e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002862:	4b43      	ldr	r3, [pc, #268]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10d      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	4b40      	ldr	r3, [pc, #256]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002872:	4a3f      	ldr	r2, [pc, #252]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002878:	6593      	str	r3, [r2, #88]	; 0x58
 800287a:	4b3d      	ldr	r3, [pc, #244]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800287c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002886:	2301      	movs	r3, #1
 8002888:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800288a:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a39      	ldr	r2, [pc, #228]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002894:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002896:	f7fe f985 	bl	8000ba4 <HAL_GetTick>
 800289a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800289c:	e009      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289e:	f7fe f981 	bl	8000ba4 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d902      	bls.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	74fb      	strb	r3, [r7, #19]
        break;
 80028b0:	e005      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028b2:	4b30      	ldr	r3, [pc, #192]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0ef      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80028be:	7cfb      	ldrb	r3, [r7, #19]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d159      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028c4:	4b2a      	ldr	r3, [pc, #168]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d01e      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d019      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028e0:	4b23      	ldr	r3, [pc, #140]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028ec:	4b20      	ldr	r3, [pc, #128]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f2:	4a1f      	ldr	r2, [pc, #124]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028fc:	4b1c      	ldr	r3, [pc, #112]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002902:	4a1b      	ldr	r2, [pc, #108]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800290c:	4a18      	ldr	r2, [pc, #96]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d016      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291e:	f7fe f941 	bl	8000ba4 <HAL_GetTick>
 8002922:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002924:	e00b      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002926:	f7fe f93d 	bl	8000ba4 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f241 3288 	movw	r2, #5000	; 0x1388
 8002934:	4293      	cmp	r3, r2
 8002936:	d902      	bls.n	800293e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	74fb      	strb	r3, [r7, #19]
            break;
 800293c:	e006      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0ec      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800294c:	7cfb      	ldrb	r3, [r7, #19]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10b      	bne.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002952:	4b07      	ldr	r3, [pc, #28]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002958:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	4903      	ldr	r1, [pc, #12]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002968:	e008      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800296a:	7cfb      	ldrb	r3, [r7, #19]
 800296c:	74bb      	strb	r3, [r7, #18]
 800296e:	e005      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002970:	40021000 	.word	0x40021000
 8002974:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002978:	7cfb      	ldrb	r3, [r7, #19]
 800297a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800297c:	7c7b      	ldrb	r3, [r7, #17]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d105      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002982:	4ba6      	ldr	r3, [pc, #664]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002986:	4aa5      	ldr	r2, [pc, #660]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800298c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800299a:	4ba0      	ldr	r3, [pc, #640]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a0:	f023 0203 	bic.w	r2, r3, #3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	499c      	ldr	r1, [pc, #624]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029bc:	4b97      	ldr	r3, [pc, #604]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	f023 020c 	bic.w	r2, r3, #12
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	4994      	ldr	r1, [pc, #592]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029de:	4b8f      	ldr	r3, [pc, #572]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	498b      	ldr	r1, [pc, #556]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a00:	4b86      	ldr	r3, [pc, #536]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	4983      	ldr	r1, [pc, #524]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a22:	4b7e      	ldr	r3, [pc, #504]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	497a      	ldr	r1, [pc, #488]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a44:	4b75      	ldr	r3, [pc, #468]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	4972      	ldr	r1, [pc, #456]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a66:	4b6d      	ldr	r3, [pc, #436]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	4969      	ldr	r1, [pc, #420]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00a      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a88:	4b64      	ldr	r3, [pc, #400]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	4961      	ldr	r1, [pc, #388]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002aaa:	4b5c      	ldr	r3, [pc, #368]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	4958      	ldr	r1, [pc, #352]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d015      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002acc:	4b53      	ldr	r3, [pc, #332]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ada:	4950      	ldr	r1, [pc, #320]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aea:	d105      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aec:	4b4b      	ldr	r3, [pc, #300]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4a4a      	ldr	r2, [pc, #296]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002af6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d015      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b04:	4b45      	ldr	r3, [pc, #276]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b12:	4942      	ldr	r1, [pc, #264]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b22:	d105      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b24:	4b3d      	ldr	r3, [pc, #244]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	4a3c      	ldr	r2, [pc, #240]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b2e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d015      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b3c:	4b37      	ldr	r3, [pc, #220]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	4934      	ldr	r1, [pc, #208]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b5a:	d105      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b5c:	4b2f      	ldr	r3, [pc, #188]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4a2e      	ldr	r2, [pc, #184]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b66:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d015      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b74:	4b29      	ldr	r3, [pc, #164]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b82:	4926      	ldr	r1, [pc, #152]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b92:	d105      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b94:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	4a20      	ldr	r2, [pc, #128]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b9e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d015      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bac:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	4918      	ldr	r1, [pc, #96]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bca:	d105      	bne.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4a12      	ldr	r2, [pc, #72]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bd6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d015      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002be4:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf2:	490a      	ldr	r1, [pc, #40]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c02:	d105      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4a04      	ldr	r2, [pc, #16]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002c10:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000

08002c20 <__errno>:
 8002c20:	4b01      	ldr	r3, [pc, #4]	; (8002c28 <__errno+0x8>)
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	20000010 	.word	0x20000010

08002c2c <__libc_init_array>:
 8002c2c:	b570      	push	{r4, r5, r6, lr}
 8002c2e:	4e0d      	ldr	r6, [pc, #52]	; (8002c64 <__libc_init_array+0x38>)
 8002c30:	4c0d      	ldr	r4, [pc, #52]	; (8002c68 <__libc_init_array+0x3c>)
 8002c32:	1ba4      	subs	r4, r4, r6
 8002c34:	10a4      	asrs	r4, r4, #2
 8002c36:	2500      	movs	r5, #0
 8002c38:	42a5      	cmp	r5, r4
 8002c3a:	d109      	bne.n	8002c50 <__libc_init_array+0x24>
 8002c3c:	4e0b      	ldr	r6, [pc, #44]	; (8002c6c <__libc_init_array+0x40>)
 8002c3e:	4c0c      	ldr	r4, [pc, #48]	; (8002c70 <__libc_init_array+0x44>)
 8002c40:	f000 ff68 	bl	8003b14 <_init>
 8002c44:	1ba4      	subs	r4, r4, r6
 8002c46:	10a4      	asrs	r4, r4, #2
 8002c48:	2500      	movs	r5, #0
 8002c4a:	42a5      	cmp	r5, r4
 8002c4c:	d105      	bne.n	8002c5a <__libc_init_array+0x2e>
 8002c4e:	bd70      	pop	{r4, r5, r6, pc}
 8002c50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c54:	4798      	blx	r3
 8002c56:	3501      	adds	r5, #1
 8002c58:	e7ee      	b.n	8002c38 <__libc_init_array+0xc>
 8002c5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c5e:	4798      	blx	r3
 8002c60:	3501      	adds	r5, #1
 8002c62:	e7f2      	b.n	8002c4a <__libc_init_array+0x1e>
 8002c64:	08003f74 	.word	0x08003f74
 8002c68:	08003f74 	.word	0x08003f74
 8002c6c:	08003f74 	.word	0x08003f74
 8002c70:	08003f78 	.word	0x08003f78

08002c74 <memset>:
 8002c74:	4402      	add	r2, r0
 8002c76:	4603      	mov	r3, r0
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d100      	bne.n	8002c7e <memset+0xa>
 8002c7c:	4770      	bx	lr
 8002c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c82:	e7f9      	b.n	8002c78 <memset+0x4>

08002c84 <iprintf>:
 8002c84:	b40f      	push	{r0, r1, r2, r3}
 8002c86:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <iprintf+0x2c>)
 8002c88:	b513      	push	{r0, r1, r4, lr}
 8002c8a:	681c      	ldr	r4, [r3, #0]
 8002c8c:	b124      	cbz	r4, 8002c98 <iprintf+0x14>
 8002c8e:	69a3      	ldr	r3, [r4, #24]
 8002c90:	b913      	cbnz	r3, 8002c98 <iprintf+0x14>
 8002c92:	4620      	mov	r0, r4
 8002c94:	f000 fa22 	bl	80030dc <__sinit>
 8002c98:	ab05      	add	r3, sp, #20
 8002c9a:	9a04      	ldr	r2, [sp, #16]
 8002c9c:	68a1      	ldr	r1, [r4, #8]
 8002c9e:	9301      	str	r3, [sp, #4]
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	f000 fbdb 	bl	800345c <_vfiprintf_r>
 8002ca6:	b002      	add	sp, #8
 8002ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cac:	b004      	add	sp, #16
 8002cae:	4770      	bx	lr
 8002cb0:	20000010 	.word	0x20000010

08002cb4 <_puts_r>:
 8002cb4:	b570      	push	{r4, r5, r6, lr}
 8002cb6:	460e      	mov	r6, r1
 8002cb8:	4605      	mov	r5, r0
 8002cba:	b118      	cbz	r0, 8002cc4 <_puts_r+0x10>
 8002cbc:	6983      	ldr	r3, [r0, #24]
 8002cbe:	b90b      	cbnz	r3, 8002cc4 <_puts_r+0x10>
 8002cc0:	f000 fa0c 	bl	80030dc <__sinit>
 8002cc4:	69ab      	ldr	r3, [r5, #24]
 8002cc6:	68ac      	ldr	r4, [r5, #8]
 8002cc8:	b913      	cbnz	r3, 8002cd0 <_puts_r+0x1c>
 8002cca:	4628      	mov	r0, r5
 8002ccc:	f000 fa06 	bl	80030dc <__sinit>
 8002cd0:	4b23      	ldr	r3, [pc, #140]	; (8002d60 <_puts_r+0xac>)
 8002cd2:	429c      	cmp	r4, r3
 8002cd4:	d117      	bne.n	8002d06 <_puts_r+0x52>
 8002cd6:	686c      	ldr	r4, [r5, #4]
 8002cd8:	89a3      	ldrh	r3, [r4, #12]
 8002cda:	071b      	lsls	r3, r3, #28
 8002cdc:	d51d      	bpl.n	8002d1a <_puts_r+0x66>
 8002cde:	6923      	ldr	r3, [r4, #16]
 8002ce0:	b1db      	cbz	r3, 8002d1a <_puts_r+0x66>
 8002ce2:	3e01      	subs	r6, #1
 8002ce4:	68a3      	ldr	r3, [r4, #8]
 8002ce6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002cea:	3b01      	subs	r3, #1
 8002cec:	60a3      	str	r3, [r4, #8]
 8002cee:	b9e9      	cbnz	r1, 8002d2c <_puts_r+0x78>
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	da2e      	bge.n	8002d52 <_puts_r+0x9e>
 8002cf4:	4622      	mov	r2, r4
 8002cf6:	210a      	movs	r1, #10
 8002cf8:	4628      	mov	r0, r5
 8002cfa:	f000 f83f 	bl	8002d7c <__swbuf_r>
 8002cfe:	3001      	adds	r0, #1
 8002d00:	d011      	beq.n	8002d26 <_puts_r+0x72>
 8002d02:	200a      	movs	r0, #10
 8002d04:	e011      	b.n	8002d2a <_puts_r+0x76>
 8002d06:	4b17      	ldr	r3, [pc, #92]	; (8002d64 <_puts_r+0xb0>)
 8002d08:	429c      	cmp	r4, r3
 8002d0a:	d101      	bne.n	8002d10 <_puts_r+0x5c>
 8002d0c:	68ac      	ldr	r4, [r5, #8]
 8002d0e:	e7e3      	b.n	8002cd8 <_puts_r+0x24>
 8002d10:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <_puts_r+0xb4>)
 8002d12:	429c      	cmp	r4, r3
 8002d14:	bf08      	it	eq
 8002d16:	68ec      	ldreq	r4, [r5, #12]
 8002d18:	e7de      	b.n	8002cd8 <_puts_r+0x24>
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	4628      	mov	r0, r5
 8002d1e:	f000 f87f 	bl	8002e20 <__swsetup_r>
 8002d22:	2800      	cmp	r0, #0
 8002d24:	d0dd      	beq.n	8002ce2 <_puts_r+0x2e>
 8002d26:	f04f 30ff 	mov.w	r0, #4294967295
 8002d2a:	bd70      	pop	{r4, r5, r6, pc}
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	da04      	bge.n	8002d3a <_puts_r+0x86>
 8002d30:	69a2      	ldr	r2, [r4, #24]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	dc06      	bgt.n	8002d44 <_puts_r+0x90>
 8002d36:	290a      	cmp	r1, #10
 8002d38:	d004      	beq.n	8002d44 <_puts_r+0x90>
 8002d3a:	6823      	ldr	r3, [r4, #0]
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	6022      	str	r2, [r4, #0]
 8002d40:	7019      	strb	r1, [r3, #0]
 8002d42:	e7cf      	b.n	8002ce4 <_puts_r+0x30>
 8002d44:	4622      	mov	r2, r4
 8002d46:	4628      	mov	r0, r5
 8002d48:	f000 f818 	bl	8002d7c <__swbuf_r>
 8002d4c:	3001      	adds	r0, #1
 8002d4e:	d1c9      	bne.n	8002ce4 <_puts_r+0x30>
 8002d50:	e7e9      	b.n	8002d26 <_puts_r+0x72>
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	200a      	movs	r0, #10
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	6022      	str	r2, [r4, #0]
 8002d5a:	7018      	strb	r0, [r3, #0]
 8002d5c:	e7e5      	b.n	8002d2a <_puts_r+0x76>
 8002d5e:	bf00      	nop
 8002d60:	08003f00 	.word	0x08003f00
 8002d64:	08003f20 	.word	0x08003f20
 8002d68:	08003ee0 	.word	0x08003ee0

08002d6c <puts>:
 8002d6c:	4b02      	ldr	r3, [pc, #8]	; (8002d78 <puts+0xc>)
 8002d6e:	4601      	mov	r1, r0
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	f7ff bf9f 	b.w	8002cb4 <_puts_r>
 8002d76:	bf00      	nop
 8002d78:	20000010 	.word	0x20000010

08002d7c <__swbuf_r>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	460e      	mov	r6, r1
 8002d80:	4614      	mov	r4, r2
 8002d82:	4605      	mov	r5, r0
 8002d84:	b118      	cbz	r0, 8002d8e <__swbuf_r+0x12>
 8002d86:	6983      	ldr	r3, [r0, #24]
 8002d88:	b90b      	cbnz	r3, 8002d8e <__swbuf_r+0x12>
 8002d8a:	f000 f9a7 	bl	80030dc <__sinit>
 8002d8e:	4b21      	ldr	r3, [pc, #132]	; (8002e14 <__swbuf_r+0x98>)
 8002d90:	429c      	cmp	r4, r3
 8002d92:	d12a      	bne.n	8002dea <__swbuf_r+0x6e>
 8002d94:	686c      	ldr	r4, [r5, #4]
 8002d96:	69a3      	ldr	r3, [r4, #24]
 8002d98:	60a3      	str	r3, [r4, #8]
 8002d9a:	89a3      	ldrh	r3, [r4, #12]
 8002d9c:	071a      	lsls	r2, r3, #28
 8002d9e:	d52e      	bpl.n	8002dfe <__swbuf_r+0x82>
 8002da0:	6923      	ldr	r3, [r4, #16]
 8002da2:	b363      	cbz	r3, 8002dfe <__swbuf_r+0x82>
 8002da4:	6923      	ldr	r3, [r4, #16]
 8002da6:	6820      	ldr	r0, [r4, #0]
 8002da8:	1ac0      	subs	r0, r0, r3
 8002daa:	6963      	ldr	r3, [r4, #20]
 8002dac:	b2f6      	uxtb	r6, r6
 8002dae:	4283      	cmp	r3, r0
 8002db0:	4637      	mov	r7, r6
 8002db2:	dc04      	bgt.n	8002dbe <__swbuf_r+0x42>
 8002db4:	4621      	mov	r1, r4
 8002db6:	4628      	mov	r0, r5
 8002db8:	f000 f926 	bl	8003008 <_fflush_r>
 8002dbc:	bb28      	cbnz	r0, 8002e0a <__swbuf_r+0x8e>
 8002dbe:	68a3      	ldr	r3, [r4, #8]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	60a3      	str	r3, [r4, #8]
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	6022      	str	r2, [r4, #0]
 8002dca:	701e      	strb	r6, [r3, #0]
 8002dcc:	6963      	ldr	r3, [r4, #20]
 8002dce:	3001      	adds	r0, #1
 8002dd0:	4283      	cmp	r3, r0
 8002dd2:	d004      	beq.n	8002dde <__swbuf_r+0x62>
 8002dd4:	89a3      	ldrh	r3, [r4, #12]
 8002dd6:	07db      	lsls	r3, r3, #31
 8002dd8:	d519      	bpl.n	8002e0e <__swbuf_r+0x92>
 8002dda:	2e0a      	cmp	r6, #10
 8002ddc:	d117      	bne.n	8002e0e <__swbuf_r+0x92>
 8002dde:	4621      	mov	r1, r4
 8002de0:	4628      	mov	r0, r5
 8002de2:	f000 f911 	bl	8003008 <_fflush_r>
 8002de6:	b190      	cbz	r0, 8002e0e <__swbuf_r+0x92>
 8002de8:	e00f      	b.n	8002e0a <__swbuf_r+0x8e>
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <__swbuf_r+0x9c>)
 8002dec:	429c      	cmp	r4, r3
 8002dee:	d101      	bne.n	8002df4 <__swbuf_r+0x78>
 8002df0:	68ac      	ldr	r4, [r5, #8]
 8002df2:	e7d0      	b.n	8002d96 <__swbuf_r+0x1a>
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <__swbuf_r+0xa0>)
 8002df6:	429c      	cmp	r4, r3
 8002df8:	bf08      	it	eq
 8002dfa:	68ec      	ldreq	r4, [r5, #12]
 8002dfc:	e7cb      	b.n	8002d96 <__swbuf_r+0x1a>
 8002dfe:	4621      	mov	r1, r4
 8002e00:	4628      	mov	r0, r5
 8002e02:	f000 f80d 	bl	8002e20 <__swsetup_r>
 8002e06:	2800      	cmp	r0, #0
 8002e08:	d0cc      	beq.n	8002da4 <__swbuf_r+0x28>
 8002e0a:	f04f 37ff 	mov.w	r7, #4294967295
 8002e0e:	4638      	mov	r0, r7
 8002e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e12:	bf00      	nop
 8002e14:	08003f00 	.word	0x08003f00
 8002e18:	08003f20 	.word	0x08003f20
 8002e1c:	08003ee0 	.word	0x08003ee0

08002e20 <__swsetup_r>:
 8002e20:	4b32      	ldr	r3, [pc, #200]	; (8002eec <__swsetup_r+0xcc>)
 8002e22:	b570      	push	{r4, r5, r6, lr}
 8002e24:	681d      	ldr	r5, [r3, #0]
 8002e26:	4606      	mov	r6, r0
 8002e28:	460c      	mov	r4, r1
 8002e2a:	b125      	cbz	r5, 8002e36 <__swsetup_r+0x16>
 8002e2c:	69ab      	ldr	r3, [r5, #24]
 8002e2e:	b913      	cbnz	r3, 8002e36 <__swsetup_r+0x16>
 8002e30:	4628      	mov	r0, r5
 8002e32:	f000 f953 	bl	80030dc <__sinit>
 8002e36:	4b2e      	ldr	r3, [pc, #184]	; (8002ef0 <__swsetup_r+0xd0>)
 8002e38:	429c      	cmp	r4, r3
 8002e3a:	d10f      	bne.n	8002e5c <__swsetup_r+0x3c>
 8002e3c:	686c      	ldr	r4, [r5, #4]
 8002e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	0715      	lsls	r5, r2, #28
 8002e46:	d42c      	bmi.n	8002ea2 <__swsetup_r+0x82>
 8002e48:	06d0      	lsls	r0, r2, #27
 8002e4a:	d411      	bmi.n	8002e70 <__swsetup_r+0x50>
 8002e4c:	2209      	movs	r2, #9
 8002e4e:	6032      	str	r2, [r6, #0]
 8002e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e54:	81a3      	strh	r3, [r4, #12]
 8002e56:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5a:	e03e      	b.n	8002eda <__swsetup_r+0xba>
 8002e5c:	4b25      	ldr	r3, [pc, #148]	; (8002ef4 <__swsetup_r+0xd4>)
 8002e5e:	429c      	cmp	r4, r3
 8002e60:	d101      	bne.n	8002e66 <__swsetup_r+0x46>
 8002e62:	68ac      	ldr	r4, [r5, #8]
 8002e64:	e7eb      	b.n	8002e3e <__swsetup_r+0x1e>
 8002e66:	4b24      	ldr	r3, [pc, #144]	; (8002ef8 <__swsetup_r+0xd8>)
 8002e68:	429c      	cmp	r4, r3
 8002e6a:	bf08      	it	eq
 8002e6c:	68ec      	ldreq	r4, [r5, #12]
 8002e6e:	e7e6      	b.n	8002e3e <__swsetup_r+0x1e>
 8002e70:	0751      	lsls	r1, r2, #29
 8002e72:	d512      	bpl.n	8002e9a <__swsetup_r+0x7a>
 8002e74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e76:	b141      	cbz	r1, 8002e8a <__swsetup_r+0x6a>
 8002e78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e7c:	4299      	cmp	r1, r3
 8002e7e:	d002      	beq.n	8002e86 <__swsetup_r+0x66>
 8002e80:	4630      	mov	r0, r6
 8002e82:	f000 fa19 	bl	80032b8 <_free_r>
 8002e86:	2300      	movs	r3, #0
 8002e88:	6363      	str	r3, [r4, #52]	; 0x34
 8002e8a:	89a3      	ldrh	r3, [r4, #12]
 8002e8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e90:	81a3      	strh	r3, [r4, #12]
 8002e92:	2300      	movs	r3, #0
 8002e94:	6063      	str	r3, [r4, #4]
 8002e96:	6923      	ldr	r3, [r4, #16]
 8002e98:	6023      	str	r3, [r4, #0]
 8002e9a:	89a3      	ldrh	r3, [r4, #12]
 8002e9c:	f043 0308 	orr.w	r3, r3, #8
 8002ea0:	81a3      	strh	r3, [r4, #12]
 8002ea2:	6923      	ldr	r3, [r4, #16]
 8002ea4:	b94b      	cbnz	r3, 8002eba <__swsetup_r+0x9a>
 8002ea6:	89a3      	ldrh	r3, [r4, #12]
 8002ea8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb0:	d003      	beq.n	8002eba <__swsetup_r+0x9a>
 8002eb2:	4621      	mov	r1, r4
 8002eb4:	4630      	mov	r0, r6
 8002eb6:	f000 f9bf 	bl	8003238 <__smakebuf_r>
 8002eba:	89a2      	ldrh	r2, [r4, #12]
 8002ebc:	f012 0301 	ands.w	r3, r2, #1
 8002ec0:	d00c      	beq.n	8002edc <__swsetup_r+0xbc>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60a3      	str	r3, [r4, #8]
 8002ec6:	6963      	ldr	r3, [r4, #20]
 8002ec8:	425b      	negs	r3, r3
 8002eca:	61a3      	str	r3, [r4, #24]
 8002ecc:	6923      	ldr	r3, [r4, #16]
 8002ece:	b953      	cbnz	r3, 8002ee6 <__swsetup_r+0xc6>
 8002ed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ed4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002ed8:	d1ba      	bne.n	8002e50 <__swsetup_r+0x30>
 8002eda:	bd70      	pop	{r4, r5, r6, pc}
 8002edc:	0792      	lsls	r2, r2, #30
 8002ede:	bf58      	it	pl
 8002ee0:	6963      	ldrpl	r3, [r4, #20]
 8002ee2:	60a3      	str	r3, [r4, #8]
 8002ee4:	e7f2      	b.n	8002ecc <__swsetup_r+0xac>
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	e7f7      	b.n	8002eda <__swsetup_r+0xba>
 8002eea:	bf00      	nop
 8002eec:	20000010 	.word	0x20000010
 8002ef0:	08003f00 	.word	0x08003f00
 8002ef4:	08003f20 	.word	0x08003f20
 8002ef8:	08003ee0 	.word	0x08003ee0

08002efc <__sflush_r>:
 8002efc:	898a      	ldrh	r2, [r1, #12]
 8002efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f02:	4605      	mov	r5, r0
 8002f04:	0710      	lsls	r0, r2, #28
 8002f06:	460c      	mov	r4, r1
 8002f08:	d458      	bmi.n	8002fbc <__sflush_r+0xc0>
 8002f0a:	684b      	ldr	r3, [r1, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	dc05      	bgt.n	8002f1c <__sflush_r+0x20>
 8002f10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	dc02      	bgt.n	8002f1c <__sflush_r+0x20>
 8002f16:	2000      	movs	r0, #0
 8002f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f1e:	2e00      	cmp	r6, #0
 8002f20:	d0f9      	beq.n	8002f16 <__sflush_r+0x1a>
 8002f22:	2300      	movs	r3, #0
 8002f24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f28:	682f      	ldr	r7, [r5, #0]
 8002f2a:	6a21      	ldr	r1, [r4, #32]
 8002f2c:	602b      	str	r3, [r5, #0]
 8002f2e:	d032      	beq.n	8002f96 <__sflush_r+0x9a>
 8002f30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f32:	89a3      	ldrh	r3, [r4, #12]
 8002f34:	075a      	lsls	r2, r3, #29
 8002f36:	d505      	bpl.n	8002f44 <__sflush_r+0x48>
 8002f38:	6863      	ldr	r3, [r4, #4]
 8002f3a:	1ac0      	subs	r0, r0, r3
 8002f3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f3e:	b10b      	cbz	r3, 8002f44 <__sflush_r+0x48>
 8002f40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f42:	1ac0      	subs	r0, r0, r3
 8002f44:	2300      	movs	r3, #0
 8002f46:	4602      	mov	r2, r0
 8002f48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f4a:	6a21      	ldr	r1, [r4, #32]
 8002f4c:	4628      	mov	r0, r5
 8002f4e:	47b0      	blx	r6
 8002f50:	1c43      	adds	r3, r0, #1
 8002f52:	89a3      	ldrh	r3, [r4, #12]
 8002f54:	d106      	bne.n	8002f64 <__sflush_r+0x68>
 8002f56:	6829      	ldr	r1, [r5, #0]
 8002f58:	291d      	cmp	r1, #29
 8002f5a:	d848      	bhi.n	8002fee <__sflush_r+0xf2>
 8002f5c:	4a29      	ldr	r2, [pc, #164]	; (8003004 <__sflush_r+0x108>)
 8002f5e:	40ca      	lsrs	r2, r1
 8002f60:	07d6      	lsls	r6, r2, #31
 8002f62:	d544      	bpl.n	8002fee <__sflush_r+0xf2>
 8002f64:	2200      	movs	r2, #0
 8002f66:	6062      	str	r2, [r4, #4]
 8002f68:	04d9      	lsls	r1, r3, #19
 8002f6a:	6922      	ldr	r2, [r4, #16]
 8002f6c:	6022      	str	r2, [r4, #0]
 8002f6e:	d504      	bpl.n	8002f7a <__sflush_r+0x7e>
 8002f70:	1c42      	adds	r2, r0, #1
 8002f72:	d101      	bne.n	8002f78 <__sflush_r+0x7c>
 8002f74:	682b      	ldr	r3, [r5, #0]
 8002f76:	b903      	cbnz	r3, 8002f7a <__sflush_r+0x7e>
 8002f78:	6560      	str	r0, [r4, #84]	; 0x54
 8002f7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f7c:	602f      	str	r7, [r5, #0]
 8002f7e:	2900      	cmp	r1, #0
 8002f80:	d0c9      	beq.n	8002f16 <__sflush_r+0x1a>
 8002f82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f86:	4299      	cmp	r1, r3
 8002f88:	d002      	beq.n	8002f90 <__sflush_r+0x94>
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	f000 f994 	bl	80032b8 <_free_r>
 8002f90:	2000      	movs	r0, #0
 8002f92:	6360      	str	r0, [r4, #52]	; 0x34
 8002f94:	e7c0      	b.n	8002f18 <__sflush_r+0x1c>
 8002f96:	2301      	movs	r3, #1
 8002f98:	4628      	mov	r0, r5
 8002f9a:	47b0      	blx	r6
 8002f9c:	1c41      	adds	r1, r0, #1
 8002f9e:	d1c8      	bne.n	8002f32 <__sflush_r+0x36>
 8002fa0:	682b      	ldr	r3, [r5, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0c5      	beq.n	8002f32 <__sflush_r+0x36>
 8002fa6:	2b1d      	cmp	r3, #29
 8002fa8:	d001      	beq.n	8002fae <__sflush_r+0xb2>
 8002faa:	2b16      	cmp	r3, #22
 8002fac:	d101      	bne.n	8002fb2 <__sflush_r+0xb6>
 8002fae:	602f      	str	r7, [r5, #0]
 8002fb0:	e7b1      	b.n	8002f16 <__sflush_r+0x1a>
 8002fb2:	89a3      	ldrh	r3, [r4, #12]
 8002fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fb8:	81a3      	strh	r3, [r4, #12]
 8002fba:	e7ad      	b.n	8002f18 <__sflush_r+0x1c>
 8002fbc:	690f      	ldr	r7, [r1, #16]
 8002fbe:	2f00      	cmp	r7, #0
 8002fc0:	d0a9      	beq.n	8002f16 <__sflush_r+0x1a>
 8002fc2:	0793      	lsls	r3, r2, #30
 8002fc4:	680e      	ldr	r6, [r1, #0]
 8002fc6:	bf08      	it	eq
 8002fc8:	694b      	ldreq	r3, [r1, #20]
 8002fca:	600f      	str	r7, [r1, #0]
 8002fcc:	bf18      	it	ne
 8002fce:	2300      	movne	r3, #0
 8002fd0:	eba6 0807 	sub.w	r8, r6, r7
 8002fd4:	608b      	str	r3, [r1, #8]
 8002fd6:	f1b8 0f00 	cmp.w	r8, #0
 8002fda:	dd9c      	ble.n	8002f16 <__sflush_r+0x1a>
 8002fdc:	4643      	mov	r3, r8
 8002fde:	463a      	mov	r2, r7
 8002fe0:	6a21      	ldr	r1, [r4, #32]
 8002fe2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002fe4:	4628      	mov	r0, r5
 8002fe6:	47b0      	blx	r6
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	dc06      	bgt.n	8002ffa <__sflush_r+0xfe>
 8002fec:	89a3      	ldrh	r3, [r4, #12]
 8002fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ff2:	81a3      	strh	r3, [r4, #12]
 8002ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff8:	e78e      	b.n	8002f18 <__sflush_r+0x1c>
 8002ffa:	4407      	add	r7, r0
 8002ffc:	eba8 0800 	sub.w	r8, r8, r0
 8003000:	e7e9      	b.n	8002fd6 <__sflush_r+0xda>
 8003002:	bf00      	nop
 8003004:	20400001 	.word	0x20400001

08003008 <_fflush_r>:
 8003008:	b538      	push	{r3, r4, r5, lr}
 800300a:	690b      	ldr	r3, [r1, #16]
 800300c:	4605      	mov	r5, r0
 800300e:	460c      	mov	r4, r1
 8003010:	b1db      	cbz	r3, 800304a <_fflush_r+0x42>
 8003012:	b118      	cbz	r0, 800301c <_fflush_r+0x14>
 8003014:	6983      	ldr	r3, [r0, #24]
 8003016:	b90b      	cbnz	r3, 800301c <_fflush_r+0x14>
 8003018:	f000 f860 	bl	80030dc <__sinit>
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <_fflush_r+0x48>)
 800301e:	429c      	cmp	r4, r3
 8003020:	d109      	bne.n	8003036 <_fflush_r+0x2e>
 8003022:	686c      	ldr	r4, [r5, #4]
 8003024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003028:	b17b      	cbz	r3, 800304a <_fflush_r+0x42>
 800302a:	4621      	mov	r1, r4
 800302c:	4628      	mov	r0, r5
 800302e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003032:	f7ff bf63 	b.w	8002efc <__sflush_r>
 8003036:	4b07      	ldr	r3, [pc, #28]	; (8003054 <_fflush_r+0x4c>)
 8003038:	429c      	cmp	r4, r3
 800303a:	d101      	bne.n	8003040 <_fflush_r+0x38>
 800303c:	68ac      	ldr	r4, [r5, #8]
 800303e:	e7f1      	b.n	8003024 <_fflush_r+0x1c>
 8003040:	4b05      	ldr	r3, [pc, #20]	; (8003058 <_fflush_r+0x50>)
 8003042:	429c      	cmp	r4, r3
 8003044:	bf08      	it	eq
 8003046:	68ec      	ldreq	r4, [r5, #12]
 8003048:	e7ec      	b.n	8003024 <_fflush_r+0x1c>
 800304a:	2000      	movs	r0, #0
 800304c:	bd38      	pop	{r3, r4, r5, pc}
 800304e:	bf00      	nop
 8003050:	08003f00 	.word	0x08003f00
 8003054:	08003f20 	.word	0x08003f20
 8003058:	08003ee0 	.word	0x08003ee0

0800305c <std>:
 800305c:	2300      	movs	r3, #0
 800305e:	b510      	push	{r4, lr}
 8003060:	4604      	mov	r4, r0
 8003062:	e9c0 3300 	strd	r3, r3, [r0]
 8003066:	6083      	str	r3, [r0, #8]
 8003068:	8181      	strh	r1, [r0, #12]
 800306a:	6643      	str	r3, [r0, #100]	; 0x64
 800306c:	81c2      	strh	r2, [r0, #14]
 800306e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003072:	6183      	str	r3, [r0, #24]
 8003074:	4619      	mov	r1, r3
 8003076:	2208      	movs	r2, #8
 8003078:	305c      	adds	r0, #92	; 0x5c
 800307a:	f7ff fdfb 	bl	8002c74 <memset>
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <std+0x38>)
 8003080:	6263      	str	r3, [r4, #36]	; 0x24
 8003082:	4b05      	ldr	r3, [pc, #20]	; (8003098 <std+0x3c>)
 8003084:	62a3      	str	r3, [r4, #40]	; 0x28
 8003086:	4b05      	ldr	r3, [pc, #20]	; (800309c <std+0x40>)
 8003088:	62e3      	str	r3, [r4, #44]	; 0x2c
 800308a:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <std+0x44>)
 800308c:	6224      	str	r4, [r4, #32]
 800308e:	6323      	str	r3, [r4, #48]	; 0x30
 8003090:	bd10      	pop	{r4, pc}
 8003092:	bf00      	nop
 8003094:	080039b9 	.word	0x080039b9
 8003098:	080039db 	.word	0x080039db
 800309c:	08003a13 	.word	0x08003a13
 80030a0:	08003a37 	.word	0x08003a37

080030a4 <_cleanup_r>:
 80030a4:	4901      	ldr	r1, [pc, #4]	; (80030ac <_cleanup_r+0x8>)
 80030a6:	f000 b885 	b.w	80031b4 <_fwalk_reent>
 80030aa:	bf00      	nop
 80030ac:	08003009 	.word	0x08003009

080030b0 <__sfmoreglue>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	1e4a      	subs	r2, r1, #1
 80030b4:	2568      	movs	r5, #104	; 0x68
 80030b6:	4355      	muls	r5, r2
 80030b8:	460e      	mov	r6, r1
 80030ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80030be:	f000 f949 	bl	8003354 <_malloc_r>
 80030c2:	4604      	mov	r4, r0
 80030c4:	b140      	cbz	r0, 80030d8 <__sfmoreglue+0x28>
 80030c6:	2100      	movs	r1, #0
 80030c8:	e9c0 1600 	strd	r1, r6, [r0]
 80030cc:	300c      	adds	r0, #12
 80030ce:	60a0      	str	r0, [r4, #8]
 80030d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80030d4:	f7ff fdce 	bl	8002c74 <memset>
 80030d8:	4620      	mov	r0, r4
 80030da:	bd70      	pop	{r4, r5, r6, pc}

080030dc <__sinit>:
 80030dc:	6983      	ldr	r3, [r0, #24]
 80030de:	b510      	push	{r4, lr}
 80030e0:	4604      	mov	r4, r0
 80030e2:	bb33      	cbnz	r3, 8003132 <__sinit+0x56>
 80030e4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80030e8:	6503      	str	r3, [r0, #80]	; 0x50
 80030ea:	4b12      	ldr	r3, [pc, #72]	; (8003134 <__sinit+0x58>)
 80030ec:	4a12      	ldr	r2, [pc, #72]	; (8003138 <__sinit+0x5c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6282      	str	r2, [r0, #40]	; 0x28
 80030f2:	4298      	cmp	r0, r3
 80030f4:	bf04      	itt	eq
 80030f6:	2301      	moveq	r3, #1
 80030f8:	6183      	streq	r3, [r0, #24]
 80030fa:	f000 f81f 	bl	800313c <__sfp>
 80030fe:	6060      	str	r0, [r4, #4]
 8003100:	4620      	mov	r0, r4
 8003102:	f000 f81b 	bl	800313c <__sfp>
 8003106:	60a0      	str	r0, [r4, #8]
 8003108:	4620      	mov	r0, r4
 800310a:	f000 f817 	bl	800313c <__sfp>
 800310e:	2200      	movs	r2, #0
 8003110:	60e0      	str	r0, [r4, #12]
 8003112:	2104      	movs	r1, #4
 8003114:	6860      	ldr	r0, [r4, #4]
 8003116:	f7ff ffa1 	bl	800305c <std>
 800311a:	2201      	movs	r2, #1
 800311c:	2109      	movs	r1, #9
 800311e:	68a0      	ldr	r0, [r4, #8]
 8003120:	f7ff ff9c 	bl	800305c <std>
 8003124:	2202      	movs	r2, #2
 8003126:	2112      	movs	r1, #18
 8003128:	68e0      	ldr	r0, [r4, #12]
 800312a:	f7ff ff97 	bl	800305c <std>
 800312e:	2301      	movs	r3, #1
 8003130:	61a3      	str	r3, [r4, #24]
 8003132:	bd10      	pop	{r4, pc}
 8003134:	08003edc 	.word	0x08003edc
 8003138:	080030a5 	.word	0x080030a5

0800313c <__sfp>:
 800313c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313e:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <__sfp+0x70>)
 8003140:	681e      	ldr	r6, [r3, #0]
 8003142:	69b3      	ldr	r3, [r6, #24]
 8003144:	4607      	mov	r7, r0
 8003146:	b913      	cbnz	r3, 800314e <__sfp+0x12>
 8003148:	4630      	mov	r0, r6
 800314a:	f7ff ffc7 	bl	80030dc <__sinit>
 800314e:	3648      	adds	r6, #72	; 0x48
 8003150:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003154:	3b01      	subs	r3, #1
 8003156:	d503      	bpl.n	8003160 <__sfp+0x24>
 8003158:	6833      	ldr	r3, [r6, #0]
 800315a:	b133      	cbz	r3, 800316a <__sfp+0x2e>
 800315c:	6836      	ldr	r6, [r6, #0]
 800315e:	e7f7      	b.n	8003150 <__sfp+0x14>
 8003160:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003164:	b16d      	cbz	r5, 8003182 <__sfp+0x46>
 8003166:	3468      	adds	r4, #104	; 0x68
 8003168:	e7f4      	b.n	8003154 <__sfp+0x18>
 800316a:	2104      	movs	r1, #4
 800316c:	4638      	mov	r0, r7
 800316e:	f7ff ff9f 	bl	80030b0 <__sfmoreglue>
 8003172:	6030      	str	r0, [r6, #0]
 8003174:	2800      	cmp	r0, #0
 8003176:	d1f1      	bne.n	800315c <__sfp+0x20>
 8003178:	230c      	movs	r3, #12
 800317a:	603b      	str	r3, [r7, #0]
 800317c:	4604      	mov	r4, r0
 800317e:	4620      	mov	r0, r4
 8003180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003182:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <__sfp+0x74>)
 8003184:	6665      	str	r5, [r4, #100]	; 0x64
 8003186:	e9c4 5500 	strd	r5, r5, [r4]
 800318a:	60a5      	str	r5, [r4, #8]
 800318c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003190:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003194:	2208      	movs	r2, #8
 8003196:	4629      	mov	r1, r5
 8003198:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800319c:	f7ff fd6a 	bl	8002c74 <memset>
 80031a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80031a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80031a8:	e7e9      	b.n	800317e <__sfp+0x42>
 80031aa:	bf00      	nop
 80031ac:	08003edc 	.word	0x08003edc
 80031b0:	ffff0001 	.word	0xffff0001

080031b4 <_fwalk_reent>:
 80031b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031b8:	4680      	mov	r8, r0
 80031ba:	4689      	mov	r9, r1
 80031bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80031c0:	2600      	movs	r6, #0
 80031c2:	b914      	cbnz	r4, 80031ca <_fwalk_reent+0x16>
 80031c4:	4630      	mov	r0, r6
 80031c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031ca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80031ce:	3f01      	subs	r7, #1
 80031d0:	d501      	bpl.n	80031d6 <_fwalk_reent+0x22>
 80031d2:	6824      	ldr	r4, [r4, #0]
 80031d4:	e7f5      	b.n	80031c2 <_fwalk_reent+0xe>
 80031d6:	89ab      	ldrh	r3, [r5, #12]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d907      	bls.n	80031ec <_fwalk_reent+0x38>
 80031dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031e0:	3301      	adds	r3, #1
 80031e2:	d003      	beq.n	80031ec <_fwalk_reent+0x38>
 80031e4:	4629      	mov	r1, r5
 80031e6:	4640      	mov	r0, r8
 80031e8:	47c8      	blx	r9
 80031ea:	4306      	orrs	r6, r0
 80031ec:	3568      	adds	r5, #104	; 0x68
 80031ee:	e7ee      	b.n	80031ce <_fwalk_reent+0x1a>

080031f0 <__swhatbuf_r>:
 80031f0:	b570      	push	{r4, r5, r6, lr}
 80031f2:	460e      	mov	r6, r1
 80031f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031f8:	2900      	cmp	r1, #0
 80031fa:	b096      	sub	sp, #88	; 0x58
 80031fc:	4614      	mov	r4, r2
 80031fe:	461d      	mov	r5, r3
 8003200:	da07      	bge.n	8003212 <__swhatbuf_r+0x22>
 8003202:	2300      	movs	r3, #0
 8003204:	602b      	str	r3, [r5, #0]
 8003206:	89b3      	ldrh	r3, [r6, #12]
 8003208:	061a      	lsls	r2, r3, #24
 800320a:	d410      	bmi.n	800322e <__swhatbuf_r+0x3e>
 800320c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003210:	e00e      	b.n	8003230 <__swhatbuf_r+0x40>
 8003212:	466a      	mov	r2, sp
 8003214:	f000 fc36 	bl	8003a84 <_fstat_r>
 8003218:	2800      	cmp	r0, #0
 800321a:	dbf2      	blt.n	8003202 <__swhatbuf_r+0x12>
 800321c:	9a01      	ldr	r2, [sp, #4]
 800321e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003222:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003226:	425a      	negs	r2, r3
 8003228:	415a      	adcs	r2, r3
 800322a:	602a      	str	r2, [r5, #0]
 800322c:	e7ee      	b.n	800320c <__swhatbuf_r+0x1c>
 800322e:	2340      	movs	r3, #64	; 0x40
 8003230:	2000      	movs	r0, #0
 8003232:	6023      	str	r3, [r4, #0]
 8003234:	b016      	add	sp, #88	; 0x58
 8003236:	bd70      	pop	{r4, r5, r6, pc}

08003238 <__smakebuf_r>:
 8003238:	898b      	ldrh	r3, [r1, #12]
 800323a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800323c:	079d      	lsls	r5, r3, #30
 800323e:	4606      	mov	r6, r0
 8003240:	460c      	mov	r4, r1
 8003242:	d507      	bpl.n	8003254 <__smakebuf_r+0x1c>
 8003244:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003248:	6023      	str	r3, [r4, #0]
 800324a:	6123      	str	r3, [r4, #16]
 800324c:	2301      	movs	r3, #1
 800324e:	6163      	str	r3, [r4, #20]
 8003250:	b002      	add	sp, #8
 8003252:	bd70      	pop	{r4, r5, r6, pc}
 8003254:	ab01      	add	r3, sp, #4
 8003256:	466a      	mov	r2, sp
 8003258:	f7ff ffca 	bl	80031f0 <__swhatbuf_r>
 800325c:	9900      	ldr	r1, [sp, #0]
 800325e:	4605      	mov	r5, r0
 8003260:	4630      	mov	r0, r6
 8003262:	f000 f877 	bl	8003354 <_malloc_r>
 8003266:	b948      	cbnz	r0, 800327c <__smakebuf_r+0x44>
 8003268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800326c:	059a      	lsls	r2, r3, #22
 800326e:	d4ef      	bmi.n	8003250 <__smakebuf_r+0x18>
 8003270:	f023 0303 	bic.w	r3, r3, #3
 8003274:	f043 0302 	orr.w	r3, r3, #2
 8003278:	81a3      	strh	r3, [r4, #12]
 800327a:	e7e3      	b.n	8003244 <__smakebuf_r+0xc>
 800327c:	4b0d      	ldr	r3, [pc, #52]	; (80032b4 <__smakebuf_r+0x7c>)
 800327e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003280:	89a3      	ldrh	r3, [r4, #12]
 8003282:	6020      	str	r0, [r4, #0]
 8003284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003288:	81a3      	strh	r3, [r4, #12]
 800328a:	9b00      	ldr	r3, [sp, #0]
 800328c:	6163      	str	r3, [r4, #20]
 800328e:	9b01      	ldr	r3, [sp, #4]
 8003290:	6120      	str	r0, [r4, #16]
 8003292:	b15b      	cbz	r3, 80032ac <__smakebuf_r+0x74>
 8003294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003298:	4630      	mov	r0, r6
 800329a:	f000 fc05 	bl	8003aa8 <_isatty_r>
 800329e:	b128      	cbz	r0, 80032ac <__smakebuf_r+0x74>
 80032a0:	89a3      	ldrh	r3, [r4, #12]
 80032a2:	f023 0303 	bic.w	r3, r3, #3
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	81a3      	strh	r3, [r4, #12]
 80032ac:	89a3      	ldrh	r3, [r4, #12]
 80032ae:	431d      	orrs	r5, r3
 80032b0:	81a5      	strh	r5, [r4, #12]
 80032b2:	e7cd      	b.n	8003250 <__smakebuf_r+0x18>
 80032b4:	080030a5 	.word	0x080030a5

080032b8 <_free_r>:
 80032b8:	b538      	push	{r3, r4, r5, lr}
 80032ba:	4605      	mov	r5, r0
 80032bc:	2900      	cmp	r1, #0
 80032be:	d045      	beq.n	800334c <_free_r+0x94>
 80032c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032c4:	1f0c      	subs	r4, r1, #4
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	bfb8      	it	lt
 80032ca:	18e4      	addlt	r4, r4, r3
 80032cc:	f000 fc0e 	bl	8003aec <__malloc_lock>
 80032d0:	4a1f      	ldr	r2, [pc, #124]	; (8003350 <_free_r+0x98>)
 80032d2:	6813      	ldr	r3, [r2, #0]
 80032d4:	4610      	mov	r0, r2
 80032d6:	b933      	cbnz	r3, 80032e6 <_free_r+0x2e>
 80032d8:	6063      	str	r3, [r4, #4]
 80032da:	6014      	str	r4, [r2, #0]
 80032dc:	4628      	mov	r0, r5
 80032de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032e2:	f000 bc04 	b.w	8003aee <__malloc_unlock>
 80032e6:	42a3      	cmp	r3, r4
 80032e8:	d90c      	bls.n	8003304 <_free_r+0x4c>
 80032ea:	6821      	ldr	r1, [r4, #0]
 80032ec:	1862      	adds	r2, r4, r1
 80032ee:	4293      	cmp	r3, r2
 80032f0:	bf04      	itt	eq
 80032f2:	681a      	ldreq	r2, [r3, #0]
 80032f4:	685b      	ldreq	r3, [r3, #4]
 80032f6:	6063      	str	r3, [r4, #4]
 80032f8:	bf04      	itt	eq
 80032fa:	1852      	addeq	r2, r2, r1
 80032fc:	6022      	streq	r2, [r4, #0]
 80032fe:	6004      	str	r4, [r0, #0]
 8003300:	e7ec      	b.n	80032dc <_free_r+0x24>
 8003302:	4613      	mov	r3, r2
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	b10a      	cbz	r2, 800330c <_free_r+0x54>
 8003308:	42a2      	cmp	r2, r4
 800330a:	d9fa      	bls.n	8003302 <_free_r+0x4a>
 800330c:	6819      	ldr	r1, [r3, #0]
 800330e:	1858      	adds	r0, r3, r1
 8003310:	42a0      	cmp	r0, r4
 8003312:	d10b      	bne.n	800332c <_free_r+0x74>
 8003314:	6820      	ldr	r0, [r4, #0]
 8003316:	4401      	add	r1, r0
 8003318:	1858      	adds	r0, r3, r1
 800331a:	4282      	cmp	r2, r0
 800331c:	6019      	str	r1, [r3, #0]
 800331e:	d1dd      	bne.n	80032dc <_free_r+0x24>
 8003320:	6810      	ldr	r0, [r2, #0]
 8003322:	6852      	ldr	r2, [r2, #4]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	4401      	add	r1, r0
 8003328:	6019      	str	r1, [r3, #0]
 800332a:	e7d7      	b.n	80032dc <_free_r+0x24>
 800332c:	d902      	bls.n	8003334 <_free_r+0x7c>
 800332e:	230c      	movs	r3, #12
 8003330:	602b      	str	r3, [r5, #0]
 8003332:	e7d3      	b.n	80032dc <_free_r+0x24>
 8003334:	6820      	ldr	r0, [r4, #0]
 8003336:	1821      	adds	r1, r4, r0
 8003338:	428a      	cmp	r2, r1
 800333a:	bf04      	itt	eq
 800333c:	6811      	ldreq	r1, [r2, #0]
 800333e:	6852      	ldreq	r2, [r2, #4]
 8003340:	6062      	str	r2, [r4, #4]
 8003342:	bf04      	itt	eq
 8003344:	1809      	addeq	r1, r1, r0
 8003346:	6021      	streq	r1, [r4, #0]
 8003348:	605c      	str	r4, [r3, #4]
 800334a:	e7c7      	b.n	80032dc <_free_r+0x24>
 800334c:	bd38      	pop	{r3, r4, r5, pc}
 800334e:	bf00      	nop
 8003350:	20000098 	.word	0x20000098

08003354 <_malloc_r>:
 8003354:	b570      	push	{r4, r5, r6, lr}
 8003356:	1ccd      	adds	r5, r1, #3
 8003358:	f025 0503 	bic.w	r5, r5, #3
 800335c:	3508      	adds	r5, #8
 800335e:	2d0c      	cmp	r5, #12
 8003360:	bf38      	it	cc
 8003362:	250c      	movcc	r5, #12
 8003364:	2d00      	cmp	r5, #0
 8003366:	4606      	mov	r6, r0
 8003368:	db01      	blt.n	800336e <_malloc_r+0x1a>
 800336a:	42a9      	cmp	r1, r5
 800336c:	d903      	bls.n	8003376 <_malloc_r+0x22>
 800336e:	230c      	movs	r3, #12
 8003370:	6033      	str	r3, [r6, #0]
 8003372:	2000      	movs	r0, #0
 8003374:	bd70      	pop	{r4, r5, r6, pc}
 8003376:	f000 fbb9 	bl	8003aec <__malloc_lock>
 800337a:	4a21      	ldr	r2, [pc, #132]	; (8003400 <_malloc_r+0xac>)
 800337c:	6814      	ldr	r4, [r2, #0]
 800337e:	4621      	mov	r1, r4
 8003380:	b991      	cbnz	r1, 80033a8 <_malloc_r+0x54>
 8003382:	4c20      	ldr	r4, [pc, #128]	; (8003404 <_malloc_r+0xb0>)
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	b91b      	cbnz	r3, 8003390 <_malloc_r+0x3c>
 8003388:	4630      	mov	r0, r6
 800338a:	f000 fb05 	bl	8003998 <_sbrk_r>
 800338e:	6020      	str	r0, [r4, #0]
 8003390:	4629      	mov	r1, r5
 8003392:	4630      	mov	r0, r6
 8003394:	f000 fb00 	bl	8003998 <_sbrk_r>
 8003398:	1c43      	adds	r3, r0, #1
 800339a:	d124      	bne.n	80033e6 <_malloc_r+0x92>
 800339c:	230c      	movs	r3, #12
 800339e:	6033      	str	r3, [r6, #0]
 80033a0:	4630      	mov	r0, r6
 80033a2:	f000 fba4 	bl	8003aee <__malloc_unlock>
 80033a6:	e7e4      	b.n	8003372 <_malloc_r+0x1e>
 80033a8:	680b      	ldr	r3, [r1, #0]
 80033aa:	1b5b      	subs	r3, r3, r5
 80033ac:	d418      	bmi.n	80033e0 <_malloc_r+0x8c>
 80033ae:	2b0b      	cmp	r3, #11
 80033b0:	d90f      	bls.n	80033d2 <_malloc_r+0x7e>
 80033b2:	600b      	str	r3, [r1, #0]
 80033b4:	50cd      	str	r5, [r1, r3]
 80033b6:	18cc      	adds	r4, r1, r3
 80033b8:	4630      	mov	r0, r6
 80033ba:	f000 fb98 	bl	8003aee <__malloc_unlock>
 80033be:	f104 000b 	add.w	r0, r4, #11
 80033c2:	1d23      	adds	r3, r4, #4
 80033c4:	f020 0007 	bic.w	r0, r0, #7
 80033c8:	1ac3      	subs	r3, r0, r3
 80033ca:	d0d3      	beq.n	8003374 <_malloc_r+0x20>
 80033cc:	425a      	negs	r2, r3
 80033ce:	50e2      	str	r2, [r4, r3]
 80033d0:	e7d0      	b.n	8003374 <_malloc_r+0x20>
 80033d2:	428c      	cmp	r4, r1
 80033d4:	684b      	ldr	r3, [r1, #4]
 80033d6:	bf16      	itet	ne
 80033d8:	6063      	strne	r3, [r4, #4]
 80033da:	6013      	streq	r3, [r2, #0]
 80033dc:	460c      	movne	r4, r1
 80033de:	e7eb      	b.n	80033b8 <_malloc_r+0x64>
 80033e0:	460c      	mov	r4, r1
 80033e2:	6849      	ldr	r1, [r1, #4]
 80033e4:	e7cc      	b.n	8003380 <_malloc_r+0x2c>
 80033e6:	1cc4      	adds	r4, r0, #3
 80033e8:	f024 0403 	bic.w	r4, r4, #3
 80033ec:	42a0      	cmp	r0, r4
 80033ee:	d005      	beq.n	80033fc <_malloc_r+0xa8>
 80033f0:	1a21      	subs	r1, r4, r0
 80033f2:	4630      	mov	r0, r6
 80033f4:	f000 fad0 	bl	8003998 <_sbrk_r>
 80033f8:	3001      	adds	r0, #1
 80033fa:	d0cf      	beq.n	800339c <_malloc_r+0x48>
 80033fc:	6025      	str	r5, [r4, #0]
 80033fe:	e7db      	b.n	80033b8 <_malloc_r+0x64>
 8003400:	20000098 	.word	0x20000098
 8003404:	2000009c 	.word	0x2000009c

08003408 <__sfputc_r>:
 8003408:	6893      	ldr	r3, [r2, #8]
 800340a:	3b01      	subs	r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	b410      	push	{r4}
 8003410:	6093      	str	r3, [r2, #8]
 8003412:	da08      	bge.n	8003426 <__sfputc_r+0x1e>
 8003414:	6994      	ldr	r4, [r2, #24]
 8003416:	42a3      	cmp	r3, r4
 8003418:	db01      	blt.n	800341e <__sfputc_r+0x16>
 800341a:	290a      	cmp	r1, #10
 800341c:	d103      	bne.n	8003426 <__sfputc_r+0x1e>
 800341e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003422:	f7ff bcab 	b.w	8002d7c <__swbuf_r>
 8003426:	6813      	ldr	r3, [r2, #0]
 8003428:	1c58      	adds	r0, r3, #1
 800342a:	6010      	str	r0, [r2, #0]
 800342c:	7019      	strb	r1, [r3, #0]
 800342e:	4608      	mov	r0, r1
 8003430:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003434:	4770      	bx	lr

08003436 <__sfputs_r>:
 8003436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003438:	4606      	mov	r6, r0
 800343a:	460f      	mov	r7, r1
 800343c:	4614      	mov	r4, r2
 800343e:	18d5      	adds	r5, r2, r3
 8003440:	42ac      	cmp	r4, r5
 8003442:	d101      	bne.n	8003448 <__sfputs_r+0x12>
 8003444:	2000      	movs	r0, #0
 8003446:	e007      	b.n	8003458 <__sfputs_r+0x22>
 8003448:	463a      	mov	r2, r7
 800344a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800344e:	4630      	mov	r0, r6
 8003450:	f7ff ffda 	bl	8003408 <__sfputc_r>
 8003454:	1c43      	adds	r3, r0, #1
 8003456:	d1f3      	bne.n	8003440 <__sfputs_r+0xa>
 8003458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800345c <_vfiprintf_r>:
 800345c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003460:	460c      	mov	r4, r1
 8003462:	b09d      	sub	sp, #116	; 0x74
 8003464:	4617      	mov	r7, r2
 8003466:	461d      	mov	r5, r3
 8003468:	4606      	mov	r6, r0
 800346a:	b118      	cbz	r0, 8003474 <_vfiprintf_r+0x18>
 800346c:	6983      	ldr	r3, [r0, #24]
 800346e:	b90b      	cbnz	r3, 8003474 <_vfiprintf_r+0x18>
 8003470:	f7ff fe34 	bl	80030dc <__sinit>
 8003474:	4b7c      	ldr	r3, [pc, #496]	; (8003668 <_vfiprintf_r+0x20c>)
 8003476:	429c      	cmp	r4, r3
 8003478:	d158      	bne.n	800352c <_vfiprintf_r+0xd0>
 800347a:	6874      	ldr	r4, [r6, #4]
 800347c:	89a3      	ldrh	r3, [r4, #12]
 800347e:	0718      	lsls	r0, r3, #28
 8003480:	d55e      	bpl.n	8003540 <_vfiprintf_r+0xe4>
 8003482:	6923      	ldr	r3, [r4, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d05b      	beq.n	8003540 <_vfiprintf_r+0xe4>
 8003488:	2300      	movs	r3, #0
 800348a:	9309      	str	r3, [sp, #36]	; 0x24
 800348c:	2320      	movs	r3, #32
 800348e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003492:	2330      	movs	r3, #48	; 0x30
 8003494:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003498:	9503      	str	r5, [sp, #12]
 800349a:	f04f 0b01 	mov.w	fp, #1
 800349e:	46b8      	mov	r8, r7
 80034a0:	4645      	mov	r5, r8
 80034a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80034a6:	b10b      	cbz	r3, 80034ac <_vfiprintf_r+0x50>
 80034a8:	2b25      	cmp	r3, #37	; 0x25
 80034aa:	d154      	bne.n	8003556 <_vfiprintf_r+0xfa>
 80034ac:	ebb8 0a07 	subs.w	sl, r8, r7
 80034b0:	d00b      	beq.n	80034ca <_vfiprintf_r+0x6e>
 80034b2:	4653      	mov	r3, sl
 80034b4:	463a      	mov	r2, r7
 80034b6:	4621      	mov	r1, r4
 80034b8:	4630      	mov	r0, r6
 80034ba:	f7ff ffbc 	bl	8003436 <__sfputs_r>
 80034be:	3001      	adds	r0, #1
 80034c0:	f000 80c2 	beq.w	8003648 <_vfiprintf_r+0x1ec>
 80034c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034c6:	4453      	add	r3, sl
 80034c8:	9309      	str	r3, [sp, #36]	; 0x24
 80034ca:	f898 3000 	ldrb.w	r3, [r8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 80ba 	beq.w	8003648 <_vfiprintf_r+0x1ec>
 80034d4:	2300      	movs	r3, #0
 80034d6:	f04f 32ff 	mov.w	r2, #4294967295
 80034da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034de:	9304      	str	r3, [sp, #16]
 80034e0:	9307      	str	r3, [sp, #28]
 80034e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034e6:	931a      	str	r3, [sp, #104]	; 0x68
 80034e8:	46a8      	mov	r8, r5
 80034ea:	2205      	movs	r2, #5
 80034ec:	f818 1b01 	ldrb.w	r1, [r8], #1
 80034f0:	485e      	ldr	r0, [pc, #376]	; (800366c <_vfiprintf_r+0x210>)
 80034f2:	f7fc fe95 	bl	8000220 <memchr>
 80034f6:	9b04      	ldr	r3, [sp, #16]
 80034f8:	bb78      	cbnz	r0, 800355a <_vfiprintf_r+0xfe>
 80034fa:	06d9      	lsls	r1, r3, #27
 80034fc:	bf44      	itt	mi
 80034fe:	2220      	movmi	r2, #32
 8003500:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003504:	071a      	lsls	r2, r3, #28
 8003506:	bf44      	itt	mi
 8003508:	222b      	movmi	r2, #43	; 0x2b
 800350a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800350e:	782a      	ldrb	r2, [r5, #0]
 8003510:	2a2a      	cmp	r2, #42	; 0x2a
 8003512:	d02a      	beq.n	800356a <_vfiprintf_r+0x10e>
 8003514:	9a07      	ldr	r2, [sp, #28]
 8003516:	46a8      	mov	r8, r5
 8003518:	2000      	movs	r0, #0
 800351a:	250a      	movs	r5, #10
 800351c:	4641      	mov	r1, r8
 800351e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003522:	3b30      	subs	r3, #48	; 0x30
 8003524:	2b09      	cmp	r3, #9
 8003526:	d969      	bls.n	80035fc <_vfiprintf_r+0x1a0>
 8003528:	b360      	cbz	r0, 8003584 <_vfiprintf_r+0x128>
 800352a:	e024      	b.n	8003576 <_vfiprintf_r+0x11a>
 800352c:	4b50      	ldr	r3, [pc, #320]	; (8003670 <_vfiprintf_r+0x214>)
 800352e:	429c      	cmp	r4, r3
 8003530:	d101      	bne.n	8003536 <_vfiprintf_r+0xda>
 8003532:	68b4      	ldr	r4, [r6, #8]
 8003534:	e7a2      	b.n	800347c <_vfiprintf_r+0x20>
 8003536:	4b4f      	ldr	r3, [pc, #316]	; (8003674 <_vfiprintf_r+0x218>)
 8003538:	429c      	cmp	r4, r3
 800353a:	bf08      	it	eq
 800353c:	68f4      	ldreq	r4, [r6, #12]
 800353e:	e79d      	b.n	800347c <_vfiprintf_r+0x20>
 8003540:	4621      	mov	r1, r4
 8003542:	4630      	mov	r0, r6
 8003544:	f7ff fc6c 	bl	8002e20 <__swsetup_r>
 8003548:	2800      	cmp	r0, #0
 800354a:	d09d      	beq.n	8003488 <_vfiprintf_r+0x2c>
 800354c:	f04f 30ff 	mov.w	r0, #4294967295
 8003550:	b01d      	add	sp, #116	; 0x74
 8003552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003556:	46a8      	mov	r8, r5
 8003558:	e7a2      	b.n	80034a0 <_vfiprintf_r+0x44>
 800355a:	4a44      	ldr	r2, [pc, #272]	; (800366c <_vfiprintf_r+0x210>)
 800355c:	1a80      	subs	r0, r0, r2
 800355e:	fa0b f000 	lsl.w	r0, fp, r0
 8003562:	4318      	orrs	r0, r3
 8003564:	9004      	str	r0, [sp, #16]
 8003566:	4645      	mov	r5, r8
 8003568:	e7be      	b.n	80034e8 <_vfiprintf_r+0x8c>
 800356a:	9a03      	ldr	r2, [sp, #12]
 800356c:	1d11      	adds	r1, r2, #4
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	9103      	str	r1, [sp, #12]
 8003572:	2a00      	cmp	r2, #0
 8003574:	db01      	blt.n	800357a <_vfiprintf_r+0x11e>
 8003576:	9207      	str	r2, [sp, #28]
 8003578:	e004      	b.n	8003584 <_vfiprintf_r+0x128>
 800357a:	4252      	negs	r2, r2
 800357c:	f043 0302 	orr.w	r3, r3, #2
 8003580:	9207      	str	r2, [sp, #28]
 8003582:	9304      	str	r3, [sp, #16]
 8003584:	f898 3000 	ldrb.w	r3, [r8]
 8003588:	2b2e      	cmp	r3, #46	; 0x2e
 800358a:	d10e      	bne.n	80035aa <_vfiprintf_r+0x14e>
 800358c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003590:	2b2a      	cmp	r3, #42	; 0x2a
 8003592:	d138      	bne.n	8003606 <_vfiprintf_r+0x1aa>
 8003594:	9b03      	ldr	r3, [sp, #12]
 8003596:	1d1a      	adds	r2, r3, #4
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	9203      	str	r2, [sp, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	bfb8      	it	lt
 80035a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80035a4:	f108 0802 	add.w	r8, r8, #2
 80035a8:	9305      	str	r3, [sp, #20]
 80035aa:	4d33      	ldr	r5, [pc, #204]	; (8003678 <_vfiprintf_r+0x21c>)
 80035ac:	f898 1000 	ldrb.w	r1, [r8]
 80035b0:	2203      	movs	r2, #3
 80035b2:	4628      	mov	r0, r5
 80035b4:	f7fc fe34 	bl	8000220 <memchr>
 80035b8:	b140      	cbz	r0, 80035cc <_vfiprintf_r+0x170>
 80035ba:	2340      	movs	r3, #64	; 0x40
 80035bc:	1b40      	subs	r0, r0, r5
 80035be:	fa03 f000 	lsl.w	r0, r3, r0
 80035c2:	9b04      	ldr	r3, [sp, #16]
 80035c4:	4303      	orrs	r3, r0
 80035c6:	f108 0801 	add.w	r8, r8, #1
 80035ca:	9304      	str	r3, [sp, #16]
 80035cc:	f898 1000 	ldrb.w	r1, [r8]
 80035d0:	482a      	ldr	r0, [pc, #168]	; (800367c <_vfiprintf_r+0x220>)
 80035d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035d6:	2206      	movs	r2, #6
 80035d8:	f108 0701 	add.w	r7, r8, #1
 80035dc:	f7fc fe20 	bl	8000220 <memchr>
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d037      	beq.n	8003654 <_vfiprintf_r+0x1f8>
 80035e4:	4b26      	ldr	r3, [pc, #152]	; (8003680 <_vfiprintf_r+0x224>)
 80035e6:	bb1b      	cbnz	r3, 8003630 <_vfiprintf_r+0x1d4>
 80035e8:	9b03      	ldr	r3, [sp, #12]
 80035ea:	3307      	adds	r3, #7
 80035ec:	f023 0307 	bic.w	r3, r3, #7
 80035f0:	3308      	adds	r3, #8
 80035f2:	9303      	str	r3, [sp, #12]
 80035f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035f6:	444b      	add	r3, r9
 80035f8:	9309      	str	r3, [sp, #36]	; 0x24
 80035fa:	e750      	b.n	800349e <_vfiprintf_r+0x42>
 80035fc:	fb05 3202 	mla	r2, r5, r2, r3
 8003600:	2001      	movs	r0, #1
 8003602:	4688      	mov	r8, r1
 8003604:	e78a      	b.n	800351c <_vfiprintf_r+0xc0>
 8003606:	2300      	movs	r3, #0
 8003608:	f108 0801 	add.w	r8, r8, #1
 800360c:	9305      	str	r3, [sp, #20]
 800360e:	4619      	mov	r1, r3
 8003610:	250a      	movs	r5, #10
 8003612:	4640      	mov	r0, r8
 8003614:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003618:	3a30      	subs	r2, #48	; 0x30
 800361a:	2a09      	cmp	r2, #9
 800361c:	d903      	bls.n	8003626 <_vfiprintf_r+0x1ca>
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0c3      	beq.n	80035aa <_vfiprintf_r+0x14e>
 8003622:	9105      	str	r1, [sp, #20]
 8003624:	e7c1      	b.n	80035aa <_vfiprintf_r+0x14e>
 8003626:	fb05 2101 	mla	r1, r5, r1, r2
 800362a:	2301      	movs	r3, #1
 800362c:	4680      	mov	r8, r0
 800362e:	e7f0      	b.n	8003612 <_vfiprintf_r+0x1b6>
 8003630:	ab03      	add	r3, sp, #12
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	4622      	mov	r2, r4
 8003636:	4b13      	ldr	r3, [pc, #76]	; (8003684 <_vfiprintf_r+0x228>)
 8003638:	a904      	add	r1, sp, #16
 800363a:	4630      	mov	r0, r6
 800363c:	f3af 8000 	nop.w
 8003640:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003644:	4681      	mov	r9, r0
 8003646:	d1d5      	bne.n	80035f4 <_vfiprintf_r+0x198>
 8003648:	89a3      	ldrh	r3, [r4, #12]
 800364a:	065b      	lsls	r3, r3, #25
 800364c:	f53f af7e 	bmi.w	800354c <_vfiprintf_r+0xf0>
 8003650:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003652:	e77d      	b.n	8003550 <_vfiprintf_r+0xf4>
 8003654:	ab03      	add	r3, sp, #12
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	4622      	mov	r2, r4
 800365a:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <_vfiprintf_r+0x228>)
 800365c:	a904      	add	r1, sp, #16
 800365e:	4630      	mov	r0, r6
 8003660:	f000 f888 	bl	8003774 <_printf_i>
 8003664:	e7ec      	b.n	8003640 <_vfiprintf_r+0x1e4>
 8003666:	bf00      	nop
 8003668:	08003f00 	.word	0x08003f00
 800366c:	08003f40 	.word	0x08003f40
 8003670:	08003f20 	.word	0x08003f20
 8003674:	08003ee0 	.word	0x08003ee0
 8003678:	08003f46 	.word	0x08003f46
 800367c:	08003f4a 	.word	0x08003f4a
 8003680:	00000000 	.word	0x00000000
 8003684:	08003437 	.word	0x08003437

08003688 <_printf_common>:
 8003688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800368c:	4691      	mov	r9, r2
 800368e:	461f      	mov	r7, r3
 8003690:	688a      	ldr	r2, [r1, #8]
 8003692:	690b      	ldr	r3, [r1, #16]
 8003694:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003698:	4293      	cmp	r3, r2
 800369a:	bfb8      	it	lt
 800369c:	4613      	movlt	r3, r2
 800369e:	f8c9 3000 	str.w	r3, [r9]
 80036a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036a6:	4606      	mov	r6, r0
 80036a8:	460c      	mov	r4, r1
 80036aa:	b112      	cbz	r2, 80036b2 <_printf_common+0x2a>
 80036ac:	3301      	adds	r3, #1
 80036ae:	f8c9 3000 	str.w	r3, [r9]
 80036b2:	6823      	ldr	r3, [r4, #0]
 80036b4:	0699      	lsls	r1, r3, #26
 80036b6:	bf42      	ittt	mi
 80036b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80036bc:	3302      	addmi	r3, #2
 80036be:	f8c9 3000 	strmi.w	r3, [r9]
 80036c2:	6825      	ldr	r5, [r4, #0]
 80036c4:	f015 0506 	ands.w	r5, r5, #6
 80036c8:	d107      	bne.n	80036da <_printf_common+0x52>
 80036ca:	f104 0a19 	add.w	sl, r4, #25
 80036ce:	68e3      	ldr	r3, [r4, #12]
 80036d0:	f8d9 2000 	ldr.w	r2, [r9]
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	42ab      	cmp	r3, r5
 80036d8:	dc28      	bgt.n	800372c <_printf_common+0xa4>
 80036da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80036de:	6822      	ldr	r2, [r4, #0]
 80036e0:	3300      	adds	r3, #0
 80036e2:	bf18      	it	ne
 80036e4:	2301      	movne	r3, #1
 80036e6:	0692      	lsls	r2, r2, #26
 80036e8:	d42d      	bmi.n	8003746 <_printf_common+0xbe>
 80036ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036ee:	4639      	mov	r1, r7
 80036f0:	4630      	mov	r0, r6
 80036f2:	47c0      	blx	r8
 80036f4:	3001      	adds	r0, #1
 80036f6:	d020      	beq.n	800373a <_printf_common+0xb2>
 80036f8:	6823      	ldr	r3, [r4, #0]
 80036fa:	68e5      	ldr	r5, [r4, #12]
 80036fc:	f8d9 2000 	ldr.w	r2, [r9]
 8003700:	f003 0306 	and.w	r3, r3, #6
 8003704:	2b04      	cmp	r3, #4
 8003706:	bf08      	it	eq
 8003708:	1aad      	subeq	r5, r5, r2
 800370a:	68a3      	ldr	r3, [r4, #8]
 800370c:	6922      	ldr	r2, [r4, #16]
 800370e:	bf0c      	ite	eq
 8003710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003714:	2500      	movne	r5, #0
 8003716:	4293      	cmp	r3, r2
 8003718:	bfc4      	itt	gt
 800371a:	1a9b      	subgt	r3, r3, r2
 800371c:	18ed      	addgt	r5, r5, r3
 800371e:	f04f 0900 	mov.w	r9, #0
 8003722:	341a      	adds	r4, #26
 8003724:	454d      	cmp	r5, r9
 8003726:	d11a      	bne.n	800375e <_printf_common+0xd6>
 8003728:	2000      	movs	r0, #0
 800372a:	e008      	b.n	800373e <_printf_common+0xb6>
 800372c:	2301      	movs	r3, #1
 800372e:	4652      	mov	r2, sl
 8003730:	4639      	mov	r1, r7
 8003732:	4630      	mov	r0, r6
 8003734:	47c0      	blx	r8
 8003736:	3001      	adds	r0, #1
 8003738:	d103      	bne.n	8003742 <_printf_common+0xba>
 800373a:	f04f 30ff 	mov.w	r0, #4294967295
 800373e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003742:	3501      	adds	r5, #1
 8003744:	e7c3      	b.n	80036ce <_printf_common+0x46>
 8003746:	18e1      	adds	r1, r4, r3
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	2030      	movs	r0, #48	; 0x30
 800374c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003750:	4422      	add	r2, r4
 8003752:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003756:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800375a:	3302      	adds	r3, #2
 800375c:	e7c5      	b.n	80036ea <_printf_common+0x62>
 800375e:	2301      	movs	r3, #1
 8003760:	4622      	mov	r2, r4
 8003762:	4639      	mov	r1, r7
 8003764:	4630      	mov	r0, r6
 8003766:	47c0      	blx	r8
 8003768:	3001      	adds	r0, #1
 800376a:	d0e6      	beq.n	800373a <_printf_common+0xb2>
 800376c:	f109 0901 	add.w	r9, r9, #1
 8003770:	e7d8      	b.n	8003724 <_printf_common+0x9c>
	...

08003774 <_printf_i>:
 8003774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003778:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800377c:	460c      	mov	r4, r1
 800377e:	7e09      	ldrb	r1, [r1, #24]
 8003780:	b085      	sub	sp, #20
 8003782:	296e      	cmp	r1, #110	; 0x6e
 8003784:	4617      	mov	r7, r2
 8003786:	4606      	mov	r6, r0
 8003788:	4698      	mov	r8, r3
 800378a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800378c:	f000 80b3 	beq.w	80038f6 <_printf_i+0x182>
 8003790:	d822      	bhi.n	80037d8 <_printf_i+0x64>
 8003792:	2963      	cmp	r1, #99	; 0x63
 8003794:	d036      	beq.n	8003804 <_printf_i+0x90>
 8003796:	d80a      	bhi.n	80037ae <_printf_i+0x3a>
 8003798:	2900      	cmp	r1, #0
 800379a:	f000 80b9 	beq.w	8003910 <_printf_i+0x19c>
 800379e:	2958      	cmp	r1, #88	; 0x58
 80037a0:	f000 8083 	beq.w	80038aa <_printf_i+0x136>
 80037a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80037ac:	e032      	b.n	8003814 <_printf_i+0xa0>
 80037ae:	2964      	cmp	r1, #100	; 0x64
 80037b0:	d001      	beq.n	80037b6 <_printf_i+0x42>
 80037b2:	2969      	cmp	r1, #105	; 0x69
 80037b4:	d1f6      	bne.n	80037a4 <_printf_i+0x30>
 80037b6:	6820      	ldr	r0, [r4, #0]
 80037b8:	6813      	ldr	r3, [r2, #0]
 80037ba:	0605      	lsls	r5, r0, #24
 80037bc:	f103 0104 	add.w	r1, r3, #4
 80037c0:	d52a      	bpl.n	8003818 <_printf_i+0xa4>
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6011      	str	r1, [r2, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	da03      	bge.n	80037d2 <_printf_i+0x5e>
 80037ca:	222d      	movs	r2, #45	; 0x2d
 80037cc:	425b      	negs	r3, r3
 80037ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80037d2:	486f      	ldr	r0, [pc, #444]	; (8003990 <_printf_i+0x21c>)
 80037d4:	220a      	movs	r2, #10
 80037d6:	e039      	b.n	800384c <_printf_i+0xd8>
 80037d8:	2973      	cmp	r1, #115	; 0x73
 80037da:	f000 809d 	beq.w	8003918 <_printf_i+0x1a4>
 80037de:	d808      	bhi.n	80037f2 <_printf_i+0x7e>
 80037e0:	296f      	cmp	r1, #111	; 0x6f
 80037e2:	d020      	beq.n	8003826 <_printf_i+0xb2>
 80037e4:	2970      	cmp	r1, #112	; 0x70
 80037e6:	d1dd      	bne.n	80037a4 <_printf_i+0x30>
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	f043 0320 	orr.w	r3, r3, #32
 80037ee:	6023      	str	r3, [r4, #0]
 80037f0:	e003      	b.n	80037fa <_printf_i+0x86>
 80037f2:	2975      	cmp	r1, #117	; 0x75
 80037f4:	d017      	beq.n	8003826 <_printf_i+0xb2>
 80037f6:	2978      	cmp	r1, #120	; 0x78
 80037f8:	d1d4      	bne.n	80037a4 <_printf_i+0x30>
 80037fa:	2378      	movs	r3, #120	; 0x78
 80037fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003800:	4864      	ldr	r0, [pc, #400]	; (8003994 <_printf_i+0x220>)
 8003802:	e055      	b.n	80038b0 <_printf_i+0x13c>
 8003804:	6813      	ldr	r3, [r2, #0]
 8003806:	1d19      	adds	r1, r3, #4
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6011      	str	r1, [r2, #0]
 800380c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003814:	2301      	movs	r3, #1
 8003816:	e08c      	b.n	8003932 <_printf_i+0x1be>
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6011      	str	r1, [r2, #0]
 800381c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003820:	bf18      	it	ne
 8003822:	b21b      	sxthne	r3, r3
 8003824:	e7cf      	b.n	80037c6 <_printf_i+0x52>
 8003826:	6813      	ldr	r3, [r2, #0]
 8003828:	6825      	ldr	r5, [r4, #0]
 800382a:	1d18      	adds	r0, r3, #4
 800382c:	6010      	str	r0, [r2, #0]
 800382e:	0628      	lsls	r0, r5, #24
 8003830:	d501      	bpl.n	8003836 <_printf_i+0xc2>
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	e002      	b.n	800383c <_printf_i+0xc8>
 8003836:	0668      	lsls	r0, r5, #25
 8003838:	d5fb      	bpl.n	8003832 <_printf_i+0xbe>
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	4854      	ldr	r0, [pc, #336]	; (8003990 <_printf_i+0x21c>)
 800383e:	296f      	cmp	r1, #111	; 0x6f
 8003840:	bf14      	ite	ne
 8003842:	220a      	movne	r2, #10
 8003844:	2208      	moveq	r2, #8
 8003846:	2100      	movs	r1, #0
 8003848:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800384c:	6865      	ldr	r5, [r4, #4]
 800384e:	60a5      	str	r5, [r4, #8]
 8003850:	2d00      	cmp	r5, #0
 8003852:	f2c0 8095 	blt.w	8003980 <_printf_i+0x20c>
 8003856:	6821      	ldr	r1, [r4, #0]
 8003858:	f021 0104 	bic.w	r1, r1, #4
 800385c:	6021      	str	r1, [r4, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d13d      	bne.n	80038de <_printf_i+0x16a>
 8003862:	2d00      	cmp	r5, #0
 8003864:	f040 808e 	bne.w	8003984 <_printf_i+0x210>
 8003868:	4665      	mov	r5, ip
 800386a:	2a08      	cmp	r2, #8
 800386c:	d10b      	bne.n	8003886 <_printf_i+0x112>
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	07db      	lsls	r3, r3, #31
 8003872:	d508      	bpl.n	8003886 <_printf_i+0x112>
 8003874:	6923      	ldr	r3, [r4, #16]
 8003876:	6862      	ldr	r2, [r4, #4]
 8003878:	429a      	cmp	r2, r3
 800387a:	bfde      	ittt	le
 800387c:	2330      	movle	r3, #48	; 0x30
 800387e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003882:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003886:	ebac 0305 	sub.w	r3, ip, r5
 800388a:	6123      	str	r3, [r4, #16]
 800388c:	f8cd 8000 	str.w	r8, [sp]
 8003890:	463b      	mov	r3, r7
 8003892:	aa03      	add	r2, sp, #12
 8003894:	4621      	mov	r1, r4
 8003896:	4630      	mov	r0, r6
 8003898:	f7ff fef6 	bl	8003688 <_printf_common>
 800389c:	3001      	adds	r0, #1
 800389e:	d14d      	bne.n	800393c <_printf_i+0x1c8>
 80038a0:	f04f 30ff 	mov.w	r0, #4294967295
 80038a4:	b005      	add	sp, #20
 80038a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038aa:	4839      	ldr	r0, [pc, #228]	; (8003990 <_printf_i+0x21c>)
 80038ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80038b0:	6813      	ldr	r3, [r2, #0]
 80038b2:	6821      	ldr	r1, [r4, #0]
 80038b4:	1d1d      	adds	r5, r3, #4
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6015      	str	r5, [r2, #0]
 80038ba:	060a      	lsls	r2, r1, #24
 80038bc:	d50b      	bpl.n	80038d6 <_printf_i+0x162>
 80038be:	07ca      	lsls	r2, r1, #31
 80038c0:	bf44      	itt	mi
 80038c2:	f041 0120 	orrmi.w	r1, r1, #32
 80038c6:	6021      	strmi	r1, [r4, #0]
 80038c8:	b91b      	cbnz	r3, 80038d2 <_printf_i+0x15e>
 80038ca:	6822      	ldr	r2, [r4, #0]
 80038cc:	f022 0220 	bic.w	r2, r2, #32
 80038d0:	6022      	str	r2, [r4, #0]
 80038d2:	2210      	movs	r2, #16
 80038d4:	e7b7      	b.n	8003846 <_printf_i+0xd2>
 80038d6:	064d      	lsls	r5, r1, #25
 80038d8:	bf48      	it	mi
 80038da:	b29b      	uxthmi	r3, r3
 80038dc:	e7ef      	b.n	80038be <_printf_i+0x14a>
 80038de:	4665      	mov	r5, ip
 80038e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80038e4:	fb02 3311 	mls	r3, r2, r1, r3
 80038e8:	5cc3      	ldrb	r3, [r0, r3]
 80038ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80038ee:	460b      	mov	r3, r1
 80038f0:	2900      	cmp	r1, #0
 80038f2:	d1f5      	bne.n	80038e0 <_printf_i+0x16c>
 80038f4:	e7b9      	b.n	800386a <_printf_i+0xf6>
 80038f6:	6813      	ldr	r3, [r2, #0]
 80038f8:	6825      	ldr	r5, [r4, #0]
 80038fa:	6961      	ldr	r1, [r4, #20]
 80038fc:	1d18      	adds	r0, r3, #4
 80038fe:	6010      	str	r0, [r2, #0]
 8003900:	0628      	lsls	r0, r5, #24
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	d501      	bpl.n	800390a <_printf_i+0x196>
 8003906:	6019      	str	r1, [r3, #0]
 8003908:	e002      	b.n	8003910 <_printf_i+0x19c>
 800390a:	066a      	lsls	r2, r5, #25
 800390c:	d5fb      	bpl.n	8003906 <_printf_i+0x192>
 800390e:	8019      	strh	r1, [r3, #0]
 8003910:	2300      	movs	r3, #0
 8003912:	6123      	str	r3, [r4, #16]
 8003914:	4665      	mov	r5, ip
 8003916:	e7b9      	b.n	800388c <_printf_i+0x118>
 8003918:	6813      	ldr	r3, [r2, #0]
 800391a:	1d19      	adds	r1, r3, #4
 800391c:	6011      	str	r1, [r2, #0]
 800391e:	681d      	ldr	r5, [r3, #0]
 8003920:	6862      	ldr	r2, [r4, #4]
 8003922:	2100      	movs	r1, #0
 8003924:	4628      	mov	r0, r5
 8003926:	f7fc fc7b 	bl	8000220 <memchr>
 800392a:	b108      	cbz	r0, 8003930 <_printf_i+0x1bc>
 800392c:	1b40      	subs	r0, r0, r5
 800392e:	6060      	str	r0, [r4, #4]
 8003930:	6863      	ldr	r3, [r4, #4]
 8003932:	6123      	str	r3, [r4, #16]
 8003934:	2300      	movs	r3, #0
 8003936:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800393a:	e7a7      	b.n	800388c <_printf_i+0x118>
 800393c:	6923      	ldr	r3, [r4, #16]
 800393e:	462a      	mov	r2, r5
 8003940:	4639      	mov	r1, r7
 8003942:	4630      	mov	r0, r6
 8003944:	47c0      	blx	r8
 8003946:	3001      	adds	r0, #1
 8003948:	d0aa      	beq.n	80038a0 <_printf_i+0x12c>
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	079b      	lsls	r3, r3, #30
 800394e:	d413      	bmi.n	8003978 <_printf_i+0x204>
 8003950:	68e0      	ldr	r0, [r4, #12]
 8003952:	9b03      	ldr	r3, [sp, #12]
 8003954:	4298      	cmp	r0, r3
 8003956:	bfb8      	it	lt
 8003958:	4618      	movlt	r0, r3
 800395a:	e7a3      	b.n	80038a4 <_printf_i+0x130>
 800395c:	2301      	movs	r3, #1
 800395e:	464a      	mov	r2, r9
 8003960:	4639      	mov	r1, r7
 8003962:	4630      	mov	r0, r6
 8003964:	47c0      	blx	r8
 8003966:	3001      	adds	r0, #1
 8003968:	d09a      	beq.n	80038a0 <_printf_i+0x12c>
 800396a:	3501      	adds	r5, #1
 800396c:	68e3      	ldr	r3, [r4, #12]
 800396e:	9a03      	ldr	r2, [sp, #12]
 8003970:	1a9b      	subs	r3, r3, r2
 8003972:	42ab      	cmp	r3, r5
 8003974:	dcf2      	bgt.n	800395c <_printf_i+0x1e8>
 8003976:	e7eb      	b.n	8003950 <_printf_i+0x1dc>
 8003978:	2500      	movs	r5, #0
 800397a:	f104 0919 	add.w	r9, r4, #25
 800397e:	e7f5      	b.n	800396c <_printf_i+0x1f8>
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1ac      	bne.n	80038de <_printf_i+0x16a>
 8003984:	7803      	ldrb	r3, [r0, #0]
 8003986:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800398a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800398e:	e76c      	b.n	800386a <_printf_i+0xf6>
 8003990:	08003f51 	.word	0x08003f51
 8003994:	08003f62 	.word	0x08003f62

08003998 <_sbrk_r>:
 8003998:	b538      	push	{r3, r4, r5, lr}
 800399a:	4c06      	ldr	r4, [pc, #24]	; (80039b4 <_sbrk_r+0x1c>)
 800399c:	2300      	movs	r3, #0
 800399e:	4605      	mov	r5, r0
 80039a0:	4608      	mov	r0, r1
 80039a2:	6023      	str	r3, [r4, #0]
 80039a4:	f7fd f824 	bl	80009f0 <_sbrk>
 80039a8:	1c43      	adds	r3, r0, #1
 80039aa:	d102      	bne.n	80039b2 <_sbrk_r+0x1a>
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	b103      	cbz	r3, 80039b2 <_sbrk_r+0x1a>
 80039b0:	602b      	str	r3, [r5, #0]
 80039b2:	bd38      	pop	{r3, r4, r5, pc}
 80039b4:	2000017c 	.word	0x2000017c

080039b8 <__sread>:
 80039b8:	b510      	push	{r4, lr}
 80039ba:	460c      	mov	r4, r1
 80039bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039c0:	f000 f896 	bl	8003af0 <_read_r>
 80039c4:	2800      	cmp	r0, #0
 80039c6:	bfab      	itete	ge
 80039c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80039ca:	89a3      	ldrhlt	r3, [r4, #12]
 80039cc:	181b      	addge	r3, r3, r0
 80039ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80039d2:	bfac      	ite	ge
 80039d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80039d6:	81a3      	strhlt	r3, [r4, #12]
 80039d8:	bd10      	pop	{r4, pc}

080039da <__swrite>:
 80039da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039de:	461f      	mov	r7, r3
 80039e0:	898b      	ldrh	r3, [r1, #12]
 80039e2:	05db      	lsls	r3, r3, #23
 80039e4:	4605      	mov	r5, r0
 80039e6:	460c      	mov	r4, r1
 80039e8:	4616      	mov	r6, r2
 80039ea:	d505      	bpl.n	80039f8 <__swrite+0x1e>
 80039ec:	2302      	movs	r3, #2
 80039ee:	2200      	movs	r2, #0
 80039f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039f4:	f000 f868 	bl	8003ac8 <_lseek_r>
 80039f8:	89a3      	ldrh	r3, [r4, #12]
 80039fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a02:	81a3      	strh	r3, [r4, #12]
 8003a04:	4632      	mov	r2, r6
 8003a06:	463b      	mov	r3, r7
 8003a08:	4628      	mov	r0, r5
 8003a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a0e:	f000 b817 	b.w	8003a40 <_write_r>

08003a12 <__sseek>:
 8003a12:	b510      	push	{r4, lr}
 8003a14:	460c      	mov	r4, r1
 8003a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a1a:	f000 f855 	bl	8003ac8 <_lseek_r>
 8003a1e:	1c43      	adds	r3, r0, #1
 8003a20:	89a3      	ldrh	r3, [r4, #12]
 8003a22:	bf15      	itete	ne
 8003a24:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a2e:	81a3      	strheq	r3, [r4, #12]
 8003a30:	bf18      	it	ne
 8003a32:	81a3      	strhne	r3, [r4, #12]
 8003a34:	bd10      	pop	{r4, pc}

08003a36 <__sclose>:
 8003a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a3a:	f000 b813 	b.w	8003a64 <_close_r>
	...

08003a40 <_write_r>:
 8003a40:	b538      	push	{r3, r4, r5, lr}
 8003a42:	4c07      	ldr	r4, [pc, #28]	; (8003a60 <_write_r+0x20>)
 8003a44:	4605      	mov	r5, r0
 8003a46:	4608      	mov	r0, r1
 8003a48:	4611      	mov	r1, r2
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	6022      	str	r2, [r4, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f7fc feb5 	bl	80007be <_write>
 8003a54:	1c43      	adds	r3, r0, #1
 8003a56:	d102      	bne.n	8003a5e <_write_r+0x1e>
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	b103      	cbz	r3, 8003a5e <_write_r+0x1e>
 8003a5c:	602b      	str	r3, [r5, #0]
 8003a5e:	bd38      	pop	{r3, r4, r5, pc}
 8003a60:	2000017c 	.word	0x2000017c

08003a64 <_close_r>:
 8003a64:	b538      	push	{r3, r4, r5, lr}
 8003a66:	4c06      	ldr	r4, [pc, #24]	; (8003a80 <_close_r+0x1c>)
 8003a68:	2300      	movs	r3, #0
 8003a6a:	4605      	mov	r5, r0
 8003a6c:	4608      	mov	r0, r1
 8003a6e:	6023      	str	r3, [r4, #0]
 8003a70:	f7fc ff89 	bl	8000986 <_close>
 8003a74:	1c43      	adds	r3, r0, #1
 8003a76:	d102      	bne.n	8003a7e <_close_r+0x1a>
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	b103      	cbz	r3, 8003a7e <_close_r+0x1a>
 8003a7c:	602b      	str	r3, [r5, #0]
 8003a7e:	bd38      	pop	{r3, r4, r5, pc}
 8003a80:	2000017c 	.word	0x2000017c

08003a84 <_fstat_r>:
 8003a84:	b538      	push	{r3, r4, r5, lr}
 8003a86:	4c07      	ldr	r4, [pc, #28]	; (8003aa4 <_fstat_r+0x20>)
 8003a88:	2300      	movs	r3, #0
 8003a8a:	4605      	mov	r5, r0
 8003a8c:	4608      	mov	r0, r1
 8003a8e:	4611      	mov	r1, r2
 8003a90:	6023      	str	r3, [r4, #0]
 8003a92:	f7fc ff84 	bl	800099e <_fstat>
 8003a96:	1c43      	adds	r3, r0, #1
 8003a98:	d102      	bne.n	8003aa0 <_fstat_r+0x1c>
 8003a9a:	6823      	ldr	r3, [r4, #0]
 8003a9c:	b103      	cbz	r3, 8003aa0 <_fstat_r+0x1c>
 8003a9e:	602b      	str	r3, [r5, #0]
 8003aa0:	bd38      	pop	{r3, r4, r5, pc}
 8003aa2:	bf00      	nop
 8003aa4:	2000017c 	.word	0x2000017c

08003aa8 <_isatty_r>:
 8003aa8:	b538      	push	{r3, r4, r5, lr}
 8003aaa:	4c06      	ldr	r4, [pc, #24]	; (8003ac4 <_isatty_r+0x1c>)
 8003aac:	2300      	movs	r3, #0
 8003aae:	4605      	mov	r5, r0
 8003ab0:	4608      	mov	r0, r1
 8003ab2:	6023      	str	r3, [r4, #0]
 8003ab4:	f7fc ff83 	bl	80009be <_isatty>
 8003ab8:	1c43      	adds	r3, r0, #1
 8003aba:	d102      	bne.n	8003ac2 <_isatty_r+0x1a>
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	b103      	cbz	r3, 8003ac2 <_isatty_r+0x1a>
 8003ac0:	602b      	str	r3, [r5, #0]
 8003ac2:	bd38      	pop	{r3, r4, r5, pc}
 8003ac4:	2000017c 	.word	0x2000017c

08003ac8 <_lseek_r>:
 8003ac8:	b538      	push	{r3, r4, r5, lr}
 8003aca:	4c07      	ldr	r4, [pc, #28]	; (8003ae8 <_lseek_r+0x20>)
 8003acc:	4605      	mov	r5, r0
 8003ace:	4608      	mov	r0, r1
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	6022      	str	r2, [r4, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f7fc ff7c 	bl	80009d4 <_lseek>
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	d102      	bne.n	8003ae6 <_lseek_r+0x1e>
 8003ae0:	6823      	ldr	r3, [r4, #0]
 8003ae2:	b103      	cbz	r3, 8003ae6 <_lseek_r+0x1e>
 8003ae4:	602b      	str	r3, [r5, #0]
 8003ae6:	bd38      	pop	{r3, r4, r5, pc}
 8003ae8:	2000017c 	.word	0x2000017c

08003aec <__malloc_lock>:
 8003aec:	4770      	bx	lr

08003aee <__malloc_unlock>:
 8003aee:	4770      	bx	lr

08003af0 <_read_r>:
 8003af0:	b538      	push	{r3, r4, r5, lr}
 8003af2:	4c07      	ldr	r4, [pc, #28]	; (8003b10 <_read_r+0x20>)
 8003af4:	4605      	mov	r5, r0
 8003af6:	4608      	mov	r0, r1
 8003af8:	4611      	mov	r1, r2
 8003afa:	2200      	movs	r2, #0
 8003afc:	6022      	str	r2, [r4, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	f7fc ff24 	bl	800094c <_read>
 8003b04:	1c43      	adds	r3, r0, #1
 8003b06:	d102      	bne.n	8003b0e <_read_r+0x1e>
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	b103      	cbz	r3, 8003b0e <_read_r+0x1e>
 8003b0c:	602b      	str	r3, [r5, #0]
 8003b0e:	bd38      	pop	{r3, r4, r5, pc}
 8003b10:	2000017c 	.word	0x2000017c

08003b14 <_init>:
 8003b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b16:	bf00      	nop
 8003b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1a:	bc08      	pop	{r3}
 8003b1c:	469e      	mov	lr, r3
 8003b1e:	4770      	bx	lr

08003b20 <_fini>:
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b22:	bf00      	nop
 8003b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b26:	bc08      	pop	{r3}
 8003b28:	469e      	mov	lr, r3
 8003b2a:	4770      	bx	lr
